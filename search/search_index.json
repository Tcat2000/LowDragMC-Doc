{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LowDragMC","text":"<p>Profile</p> <p></p> <p>LowDragMC is not an active team, but rather a collection of various interesting mod projects.  </p> <p>The sole maintainer of these projects is KilaBash :) </p> <p> Join our Discord </p> <p> GitHub Repository </p> <p>In essence, this is more of a hub for independent projects from myself and many talented developers rather than a structured team.  </p> <p>We are dedicated to developing creative mods that offer customization capabilities to users, with a particular focus on technical and rendering aspects.  </p>"},{"location":"#our-mod-list","title":"Our Mod List:","text":"<ol> <li>LDLib </li> <li>Multiblocked &amp; Multiblockded2</li> <li>Photon </li> <li>Shimmer </li> </ol> <p>If you encounter any issues, feel free to submit an issue.  </p> <p>If you enjoy our projects, contributions via PRs are always welcome! \ud83d\ude80</p>"},{"location":"ldlib/","title":"Introduction","text":"<p>LDLib is a libarary mod for custom rendering, modular gui.</p> <p>LDLib provides a number of renderers, as well as a modular GUI frameworks, including emissive texture supports, custom shaders, and particle systems.</p> <p> Discord: https://discord.com/invite/sDdf2yD9bh</p> <p> Github:  https://github.com/Low-Drag-MC/LDLib-MultiLoader</p>"},{"location":"ldlib/java_integration/","title":"Java Integration","text":"<p>You can find the latest version from our maven.</p> <pre><code>repositories{\n    maven {\n        name \"firstdarkdev\"\n        url \"https://maven.firstdarkdev.xyz/snapshots\"\n    }\n}\n</code></pre> ForgeFabricArchitectury-Common <pre><code>dependencies {\n    implementation fg.deobf(\"com.lowdragmc.ldlib:ldlib-forge-{minecraft_version}:{latest_version}\") { transitive = false }\n}\n</code></pre> <pre><code>dependencies {\n    modImplementation(\"com.lowdragmc.ldlib:ldlib-fabric-{minecraft_version}:{latest_version}\") { transitive = false }\n}\n</code></pre> <pre><code>dependencies {\n    modCompileOnly(\"com.lowdragmc.ldlib:ldlib-common-{minecraft_version}:{latest_version}\")\n}\n</code></pre>"},{"location":"ldlib/SyncData/","title":"Introduction and Setup","text":"<p>Developers always feel annoying while maintain the data synchronization between the <code>Remote</code> and <code>Server</code>, as well as the data persistence. In general, dev has to write massive code about the serialization and network packet handling.</p> <p>INSTEAD: LDLib provides a powerful sync/persisted system based on annotation. You can easily handle all sync/persisted logic for your <code>BlockEntity</code> without any addional code.</p>"},{"location":"ldlib/SyncData/#setup","title":"Setup","text":"<p>To use SyncData system for your blockentity, you can make your class implement <code>IManagedBlockEntity</code> and <code>IManaged</code>.</p>"},{"location":"ldlib/SyncData/#iasyncautosyncblockentity","title":"<code>IAsyncAutoSyncBlockEntity</code>","text":"<p>I suggest you use <code>IAsyncAutoSyncBlockEntity</code> instead of <code>IManagedBlockEntity</code>, whihc allow you to ignore <code>markDirty</code>, everything will be done by SyncData system, you no need to care about anything else.</p> <p><pre><code>public class MyBlockEntity extends BlockEntity implements IAsyncAutoSyncBlockEntity, IAutoPersistBlockEntity, IManaged {\n    protected static final ManagedFieldHolder MANAGED_FIELD_HOLDER = new ManagedFieldHolder(MyBlockEntity.class);\n    private final FieldManagedStorage syncStorage = new FieldManagedStorage(this);\n\n    @Override\n    public ManagedFieldHolder getFieldHolder() {\n        return MANAGED_FIELD_HOLDER;\n    }\n\n    @Override\n    public IManagedStorage getSyncStorage() {\n        return syncStorage;\n    }\n\n    @Override\n    public void onChanged() {\n        setChanged();\n    }\n\n    @Override\n    public IManagedStorage getRootStorage() {\n        return getSyncStorage();\n    }\n}\n</code></pre> Then you can enjoy the benefits of the SyncData System!!</p>"},{"location":"ldlib/SyncData/#iautopersistblockentity","title":"<code>IAutoPersistBlockEntity</code>","text":"<p>If you want to persisted data to nbt via <code>@Persisted</code>, also implenet this interface. </p> <p>you can save <code>@DropSaved</code> fields to ItemStack: <pre><code>IAutoPersistBlockEntity.saveManagedPersistentData(tag, true);\n\n// for example, block clone\n@Override\npublic ItemStack getCloneItemStack(BlockGetter level, BlockPos pos, BlockState state) {\n    ItemStack itemStack = super.getCloneItemStack(level, pos, state);\n    if (getBlockEntity(level, pos) instanceof IAutoPersistBlockEntity dropSave) {\n        dropSave.saveManagedPersistentData(itemStack.getOrCreateTag(), true);\n    }\n    return itemStack;\n}\n</code></pre></p> <p>also lead from itemStack:</p> <pre><code>IAutoPersistBlockEntity.loadManagedPersistentData(tag);\n\n//for example, place a block\n@Override\npublic void setPlacedBy(Level pLevel, BlockPos pPos, BlockState pState, @Nullable LivingEntity player, ItemStack pStack) {\n    if (!pLevel.isClientSide) {\n        if (getBlockEntity(level, pos) instanceof IAutoPersistBlockEntity dropSave) {\n            CompoundTag tag = pStack.getTag();\n            if (tag != null) {\n                dropSave.loadManagedPersistentData(tag);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ldlib/SyncData/#listen-managed-field-changes","title":"Listen Managed Field Changes","text":"<p>Sometimes you need to listen for a field changes, such as scheduling render updates when a field is synchronized to the client. <pre><code>public class MyBlockEntity extends BlockEntity implements IAsyncAutoSyncBlockEntity, IAutoPersistBlockEntity, IManaged {\n    @Persisted\n    boolean shouldRenderOverlay;\n\n    public MyBlockEntity(.....) {\n        if (LDLib.isRemote()) {\n            addSyncUpdateListener(\"shouldRenderOverlay\", this::fieldUpdated);\n        }\n    }\n\n    protected void fieldUpdated(String fieldName, Object newValue, Object oldValue) {\n        scheduleRenderUpdate();\n    }\n}\n</code></pre></p>"},{"location":"ldlib/SyncData/#using-persisted-fields-in-initialization-code","title":"Using <code>@Persisted</code> fields in initialization code","text":"<p>Loading those fields usually happens during the chunk load, which does not guarantee a safe environment to perform any additional operations.</p> <p>If the initialization logic needs to access the values of any <code>@Persisted</code> fields, it needs to be scheduled to happen on the next tick instead:</p> <pre><code>public void onLoad() {\n    if (!LDLib.isRemote()) {\n        getLevel().getServer().tell(new TickTask(0, this::initialize));\n    }\n}\n\npublic void initialize() {\n    // init code here\n}\n</code></pre>"},{"location":"ldlib/SyncData/Anotations/","title":"Anotations","text":"<p>We show all anotations and their usage in this page.</p>"},{"location":"ldlib/SyncData/Anotations/#descsynced","title":"<code>@DescSynced</code>","text":"<p>Annotate a field, the value of this field (server side) will be synced to the client side (specifically, <code>remote</code>)</p> <p>if field also be annotated with <code>@LazyManaged</code>, you need to manually tell him when to synchronize</p> <pre><code>@DescSynced\nint a;\n@DescSynced @LazyManaged\nint b;\n\npublic void setA(int newValue) {\n    a = newValue; // will be synced automatically, in general\n}\n\npublic void setB(int newValue) {\n    b = newValue;\n    markDirty(\"b\"); // mannually notify chagned\n}\n</code></pre>"},{"location":"ldlib/SyncData/Anotations/#persisted","title":"<code>@Persisted</code>","text":"<p>Annotate a field, the value of this field (server side) will be written/read to/from BlockEntities' nbt. </p> <p>-<code>String key()</code> represent tag name in nbt. default -- use field name instead.</p> <p><pre><code>@Persisted(key = \"fluidAmount\")\nint value = 100;\n@Persisted\nboolean isWater = true;\n</code></pre> its nbt looks like</p> <pre><code>{\n  \"fluidAmount\": 100,\n  \"isWater\": true\n}\n</code></pre>"},{"location":"ldlib/SyncData/Anotations/#dropsaved","title":"<code>@DropSaved</code>","text":"<p>Annotate a field, the value of this field will be saved to <code>Itemstack</code>'s nbt when you pick(clone) / harvest this block, and loaded from <code>ItemStack</code> when you place the block in the world.</p>"},{"location":"ldlib/SyncData/Anotations/#rpcmethod","title":"<code>@RPCMethod</code>","text":"<p>Annotate a method, you can send RPC packet between different sides. You are free to define the parameters of the methodas long as the parameters support sync, and send rpc anywhere in your class.</p> <pre><code>public void update() {\n    if (!isRemote()) {\n        rpcToTracking(\"rpcLogic\", Direction.UP, 100);\n        rpcToPlayer(player, \"rpcLogic\", Direction.UP, 100);\n    } else {\n        rpcToServer(\"rpcLogic\", Direction.UP, 100);\n    }\n}\n\n@RPCMethod\npublic void rpcLogic(Direction value1, int value2) {\n    // do your logic\n    if (isRemote()) {\n        System.out.println(\"Recipe rpc from server\");\n    }\n    if (isRemote()) {\n        System.out.println(\"Recipe rpc from remote\");\n    }\n}\n</code></pre> <ul> <li><code>rpcToTracking</code>: send to all remote players if this blockentity is loaded(tracked) in their remotes.</li> <li><code>rpcToPlayer</code>: send to a specfic player</li> <li><code>rpcToServer</code>: send to server.</li> </ul>"},{"location":"ldlib/SyncData/Anotations/#readonlymanaged","title":"<code>@ReadOnlyManaged</code>","text":"<p>Some class types do not support instance, and they must be <code>final</code> and cannot be changed. (e.g. class type with <code>ITagSerializable</code> is read only, they can be synchronized and persisted, but cannot modify their instance references). If you want this field not to be <code>finnal</code>, it may be <code>null</code>, and the instance may changed, you can use <code>@ReadOnlyManaged</code>.</p> <pre><code>@DescSynced\n@Persisted\n@ReadOnlyManaged(onDirtyMethod = \"onCoverDirty\", serializeMethod = \"serializeCoverUid\", deserializeMethod = \"deserializeCoverUid\")\nprivate CoverBehavior up, down, north, south, west, east;\n\nprivate boolean onCoverDirty(CoverBehavior coverBehavior) {\n    if (coverBehavior != null) {\n        for (IRef ref : coverBehavior.getSyncStorage().getNonLazyFields()) {\n            ref.update();\n        }\n        return coverBehavior.getSyncStorage().hasDirtyFields();\n    }\n    return false;\n}\n\nprivate CompoundTag serializeCoverUid(CoverBehavior coverBehavior) {\n    var uid = new CompoundTag();\n    uid.putString(\"id\", GTRegistries.COVERS.getKey(coverBehavior.coverDefinition).toString());\n    uid.putInt(\"side\", coverBehavior.attachedSide.ordinal());\n    return uid;\n}\n\nprivate CoverBehavior deserializeCoverUid(CompoundTag uid) {\n    var definitionId = new ResourceLocation(uid.getString(\"id\"));\n    var side = Direction.values()[uid.getInt(\"side\")];\n    var definition = GTRegistries.COVERS.get(definitionId);\n    if (definition != null) {\n        return definition.createCoverBehavior(this, side);\n    }\n    GTCEu.LOGGER.error(\"couldn't find cover definition {}\", definitionId);\n    throw new RuntimeException();\n}\n</code></pre> <p><code>onDirtyMethod</code>: if this field has changes.</p> <p><code>serializeMethod</code>: get a unique id of this field.</p> <p><code>deserializeMethod</code>: if field's unique id changed / set from <code>null</code> to instance. create a new instance for it.</p> <p>For example, <code>CoverBehavior</code> above is a calss inherit <code>IManaged</code>(so sync annotations in CoverBehavior also works). but it's constructor need to pass <code>BlockEntity</code> into it, so SyncData system couldn't help create its instance. we can use this way to address it.</p>"},{"location":"ldlib/SyncData/type/","title":"Type Support","text":"<p>Here we list all the classes with built-in support and how to add support to a class.</p>"},{"location":"ldlib/SyncData/type/#built-in-supports","title":"Built-in Supports:","text":"<ul> <li><code>Primitive</code>: <code>int</code>, <code>boolean</code>, <code>Integer</code>, <code>String</code>, ...</li> <li><code>Enum</code></li> <li><code>NBT</code></li> <li><code>FriendlyBuf</code></li> <li><code>UUID</code></li> <li><code>ResourceLocation</code></li> <li><code>Component</code></li> <li><code>Recipe</code></li> <li><code>ItemStack</code></li> <li><code>FluidStack</code>(ldlib)</li> <li><code>BlockPos</code></li> <li><code>Size</code></li> <li><code>Position</code></li> <li><code>IGuiTexture</code></li> <li><code>Array</code>: T[] value.... (if T is support)</li> <li><code>Collection</code>: Set, List.... (if T is support) <li><code>ITagSerializable</code>: if class inherits from <code>ITagSerializable</code> it can also be synced/persisted but it should be a <code>final</code> field.</li> <li><code>IManaged</code>: if class inherits from <code>IManaged</code> it can also be synced/persisted but it should be a <code>final</code> field. Besides, syndata annotations in Imanaged can also be handled.</li>"},{"location":"ldlib/SyncData/type/#addtional-supports","title":"Addtional Supports:","text":"<p>The easiest way add support for a new class is to create an <code>Accessor</code>. <pre><code>public class GTRecipeAccessor extends CustomObjectAccessor&lt;GTRecipe&gt; {\n\n    public GTRecipeAccessor() {\n        super(GTRecipe.class, true); // field class, whether this accessor is available for its children class\n    }\n\n    @Override\n    public ITypedPayload&lt;?&gt; serialize(AccessorOp accessorOp, GTRecipe gtRecipe) {\n        FriendlyByteBuf serializedHolder = new FriendlyByteBuf(Unpooled.buffer());\n        serializedHolder.writeUtf(gtRecipe.id.toString());\n        GTRecipeSerializer.SERIALIZER.toNetwork(serializedHolder, gtRecipe);\n        return FriendlyBufPayload.of(serializedHolder);\n    }\n\n    @Override\n    public GTRecipe deserialize(AccessorOp accessorOp, ITypedPayload&lt;?&gt; payload) {\n        if (payload instanceof FriendlyBufPayload buffer) {\n            var id = new ResourceLocation(buffer.getPayload().readUtf());\n            return GTRecipeSerializer.SERIALIZER.fromNetwork(id, buffer.getPayload());\n        }\n        return null;\n    }\n}\n</code></pre> register accessors <pre><code>TypedPayloadRegistries.register(Class&lt;T&gt; clazz, Supplier&lt;T&gt; factory, IAccessor accessor, int priority)\n</code></pre> * <code>clazz</code>: payload class, Generally speaking, it is the same as the payload used in the accessor. The payload here is persisted only. You can use different payloads in the accessor and check for the correct type. * <code>factory</code>: payload instance * <code>accessor</code>: accessor * <code>priority</code>: priority (if this field can be handled by multi accessors)</p> <p>Forge: <pre><code>@LDLibPlugin\npublic class LDLibPlugin implements ILDLibPlugin {\n    @Override\n    public void onLoad() {\n        // in ldlib plugin\n        register(FriendlyBufPayload.class, FriendlyBufPayload::new, new GTRecipeAccessor(), 1000);\n    }\n}\n</code></pre></p> <p>Fabric: add an entrypoints: <pre><code>\"entrypoints\": {\n    \"ldlib_pugin\": [\n      \"com.gregtechceu.gtceu.integration.ldlib.fabric.LDLibPlugin\"\n    ],\n}\n</code></pre> <pre><code>public class LDLibPlugin implements ILDLibPlugin {\n    @Override\n    public void onLoad() {\n        // in ldlib plugin\n        register(FriendlyBufPayload.class, FriendlyBufPayload::new, new GTRecipeAccessor(), 1000);\n    }\n}\n</code></pre></p>"},{"location":"ldlib/compass/","title":"Introduction","text":"<p>Compass is a doucament system combine both ponder-like and quest book-like system.</p> <p>You can create separate compass system for your mods and projects.</p> <p>The compass is entirely file driven and requires no java code to be written.</p> <p>The compass file should be placed in <code>/assets/project_id/compass/...</code></p>"},{"location":"ldlib/compass/#structure","title":"Structure","text":"<ul> <li><code>section</code>: The classification section in comapss, similar to the list on the left in quest. All configuration files are located at <code>/assets/project_id/compass/sections/..</code>.</li> <li><code>node</code>: The node in the section is similar to a task node in questbook, and there are relationship between the nodes. All configuration files are located at <code>/assets/project_id/compass/nodes/..</code>.</li> <li><code>page</code>: The node json file points to a page, edited using <code>xml</code>. All configuration files are located at <code>/assets/project_id/compass/pages/en_us/..</code>.</li> </ul>"},{"location":"ldlib/compass/#section","title":"Section","text":"<p>The section configuration is as follows: <pre><code>{\n  \"button_texture\": {\n    \"type\": \"item\",\n    \"res\": \"minecraft:apple\"\n  },\n  \"priority\": 1,\n  \"background_texture\": {\n    \"type\": \"resource\",\n    \"res\": \"ldlib:textures/gui/icon.png\"\n  }\n}\n</code></pre></p> <ul> <li><code>priority</code>: The lower the priority, the higher in the list.</li> <li><code>section_id</code>: The unique identification id of a section is determined by the path to the configuration file. For example, if a section file is located at <code>assets/gtceu/compass/sections/my_section.json</code>, then its <code>section_id</code> should be <code>gtceu:my_section</code></li> </ul>"},{"location":"ldlib/compass/#node","title":"Node","text":"<p>The section configuration is as follows: <pre><code>{\n  \"section\": \"ldlib:my_section\",\n  \"szie\": 24,\n  \"button_texture\": {\n    \"type\": \"item\",\n    \"res\": \"minecraft:black_wool\"\n  },\n  \"position\": [50, 50],\n  \"pre_nodes\": [\n    \"ldlib:my_node_2\"\n  ],\n  \"page\": \"ldlib:my_node\",\n  \"items\": [\n    \"minecraft:apple\",\n    \"minecraft:stone\"\n  ]\n}\n</code></pre></p> <ul> <li><code>section</code>: section id. It indicates which section the node belongs to.</li> <li><code>size</code>: size of the node in the section view. (default by 24)</li> <li><code>position</code>: the relative coordinates in the section view. The actual display position in the screen is calculated by compass automatically.</li> <li><code>pre_nodes</code>: it refers to its parent nods. the section view will show their relations by lines. And a quick link to these relevant nodes is shown on the right panel after you open the page view.</li> <li><code>items</code>: Pressing <code>[C]</code> when you're looking hover toolips at specifc items for a while will quickly open the compass system.</li> </ul>"},{"location":"ldlib/compass/#page","title":"Page","text":"<p>Pages are configured using xml, you can learn it by reading the ttuto Compass XML. The comments detail the purpose of tags in xml.</p> <p><code>Localization</code>: You can localize xml files by placing them in different language folders. such as: </p> <ul> <li>en_us: <code>assets/ldlib/compass/pages/en_us/my_page.xml</code></li> <li>zh_cn: <code>assets/ldlib/compass/pages/zh_cmn/my_page.xml</code></li> </ul>"},{"location":"ldlib/compass/#example","title":"Example","text":"<p>unzip it under the <code>.minecraft/ldlib/assets/...</code> example.zip</p>"},{"location":"ldlib/compass/scene/","title":"Compass Scene","text":"<p>Compass Scene is inspired by the ponder. The difference is that you don't need to write code, and all scenes can be implemented through <code>xml</code>. This page details how to configure a scene.</p>"},{"location":"ldlib/compass/scene/#compass","title":"<code>&lt;compass/&gt;</code>","text":"<p>Prepare your scene settings: * <code>scene</code>: only use the scene (disable the information above) * <code>height</code>: scene height * <code>zoom</code>: zoom intial value * <code>range</code>: plane range intial value * <code>draggable</code>: whether the scene is draggable * <code>scalable</code>: whether the scene is scalable * <code>camera</code>: camera mode, <code>perspective</code> or <code>ortho</code> * <code>yaw</code>: yad intial value * <code>tick-scene</code>: should the scene try to call objects' tick functions, such as blockentities, entities, particles. <pre><code>&lt;page&gt;\n    &lt;compass tick-scene=\"true\"&gt; \n    &lt;!-- scene=\"true\" height=\"250\" zoom=\"28\" range=\"5\" draggable=\"false\" scalable=\"false\" camera=\"perspective\" yaw=\"25\" tick-scene=\"false\" can also be set here--&gt;\n    &lt;/compass&gt;\n&lt;/page&gt;\n</code></pre></p>"},{"location":"ldlib/compass/scene/#frame","title":"<code>&lt;frame/&gt;</code>","text":"<p>The compass scene consists of many <code>&lt;frame&gt;</code>. <code>&lt;frame&gt;</code> refers to a chapter/section of the scene animation.</p> <p>The user can jump back and forth between frames, but not to a specific moment of animation within the frame.</p> <p><code>&lt;description/&gt;</code>: Describes the frame, shows it on hover tooltips, and has the same syntax as the <code>&lt;text/&gt;</code> label. <pre><code>&lt;page&gt;\n    &lt;compass&gt;\n        &lt;frame&gt;\n            &lt;description&gt;F1&lt;/description&gt;\n            &lt;!--actions--&gt;\n        &lt;/frame&gt;\n        &lt;frame&gt;\n            &lt;description&gt;F2&lt;/description&gt;\n            &lt;!--actions--&gt;\n        &lt;/frame&gt;\n        &lt;frame&gt;\n            &lt;description&gt;F3&lt;/description&gt;\n            &lt;!--actions--&gt;\n        &lt;/frame&gt;\n    &lt;/compass&gt;\n&lt;/page&gt;\n</code></pre> </p>"},{"location":"ldlib/compass/scene/#actions","title":"Actions","text":"<p>Actions are used under the <code>&lt;frame/&gt;</code> tag. There are two types of built-in actions <code>&lt;information/&gt;</code> and <code>&lt;scene/&gt;</code>. You can register custom actions via Java if you want.</p> <p>Actions are executed sequentially, and the next action is executed if and only if the last action is completed, but this can be adjusted using the following attributes, similar to ppt animation:  - delay: delay time after last action finish. (tick)  - start-before-last: start this action while the last one is performing. <pre><code>&lt;frame&gt;\n    &lt;information type=\"item\" url=\"minecraft:apple\"&gt;\n        &lt;style bold=\"true\" color=\"#ffff0000\"&gt;&lt;lang key=\"ldlib.author\"/&gt;&lt;/style&gt;\n    &lt;/information&gt;\n    &lt;scene delay=\"20\"&gt;\n        &lt;add pos=\"1 0 1\" block=\"minecraft:glass\"/&gt;\n    &lt;/scene&gt;\n    &lt;scene start-before-last=\"true\"&gt;\n        &lt;add pos=\"0 0 0\" block=\"minecraft:glass\"/&gt;\n    &lt;/scene&gt;\n&lt;/frame&gt;\n</code></pre> </p>"},{"location":"ldlib/compass/scene/#information","title":"<code>&lt;information/&gt;</code>","text":"<p>Action information: display text and images on top <pre><code>&lt;information&gt;\n    &lt;style bold=\"true\" color=\"#ffff0000\"&gt;&lt;lang key=\"ldlib.author\"/&gt;&lt;/style&gt;\n&lt;/information&gt;\n&lt;information type=\"item\" url=\"minecraft:apple\"&gt;\n    item\n&lt;/information&gt;\n&lt;information type=\"resource\" url=\"ldlib:textures/gui/icon.png\"&gt;\n    image\n&lt;/information&gt;\n&lt;information type=\"shader\" url=\"ldlib:fbm\"&gt;\n    shader\n&lt;/information&gt;\n</code></pre></p>"},{"location":"ldlib/compass/scene/#scene","title":"<code>&lt;scene/&gt;</code>","text":"<p>Action scene: Animate the scene. Notice that all the operations under the <code>&lt;scene/&gt;</code> are performing simultaneously. More than one <code>&lt;scene/&gt;</code> label should be used when the operation is sequential.</p> <p>Operations: <code>&lt;add/&gt;</code>, <code>&lt;remove/&gt;</code>, <code>&lt;modify/&gt;</code>, <code>&lt;add-entity/&gt;</code>, <code>&lt;modify-entity/&gt;</code>, <code>&lt;remoge-entity/&gt;</code>, <code>&lt;rotation/&gt;</code>, <code>&lt;highlight/&gt;</code>, <code>&lt;tooltip/&gt;</code></p>"},{"location":"ldlib/compass/scene/#add","title":"<code>&lt;add/&gt;</code>","text":"<pre><code>&lt;!--add block to the scene with animation--&gt;\n&lt;add pos=\"0 0 0\" block=\"minecraft:glass\"/&gt;\n&lt;!--add block with properties--&gt;\n&lt;add pos=\"1 1 0\" block=\"minecraft:campfire\"&gt;\n    &lt;properties name=\"lit\" value=\"false\"/&gt;\n&lt;/add&gt;\n&lt;!--add block with nbt for blockentity--&gt;\n&lt;add pos=\"3 0 1\" block=\"minecraft:chest\"&gt;\n    &lt;nbt&gt;\n        {\n            Items: [\n                {\n                    Count: 63b,\n                    Slot: 0b,\n                    id: \"minecraft:coal_block\"\n                }\n            ]\n        }\n    &lt;/nbt&gt;\n&lt;/add&gt;\n&lt;!--offset: animation offset, duration: animation duration--&gt;\n&lt;add pos=\"0 1 0\" offset=\"3 1 0\" duration=\"40\" block=\"minecraft:glass\"/&gt;\n</code></pre>"},{"location":"ldlib/compass/scene/#remove","title":"<code>&lt;remove/&gt;</code>","text":"<pre><code>&lt;!--remove block from the scene with animation--&gt;\n&lt;remove pos=\"0 0 0\" offset=\"3 1 0\" duration=\"40\"/&gt;\n</code></pre>"},{"location":"ldlib/compass/scene/#modify","title":"<code>&lt;modify/&gt;</code>","text":"<pre><code>&lt;!--modify a block, its kinda similar to the add label but without animation --&gt;\n&lt;modify pos=\"1 1 0\" block=\"minecraft:campfire\"&gt;\n    &lt;properties name=\"lit\" value=\"true\"/&gt;\n    &lt;nbt&gt;\n        {\n        }\n    &lt;/nbt&gt;\n&lt;/modify&gt;\n</code></pre>"},{"location":"ldlib/compass/scene/#add-entity","title":"<code>&lt;add-entity/&gt;</code>","text":"<pre><code>&lt;!-- add entities by its type name. You have to allocate it an id, or a random id will be generated--&gt;\n&lt;add-entity pos=\"0 1 0\" type=\"minecraft:player\" id=\"12\"/&gt;\n&lt;!-- add entities with tag--&gt;\n&lt;add-entity pos=\"0.5 3 0.5\" type=\"minecraft:item\" id=\"2\"&gt;\n    &lt;nbt&gt;\n        {\n            Item: {\n                Count: 64b,\n                id: \"minecraft:spruce_door\"\n            }\n        }\n    &lt;/nbt&gt;\n&lt;/add-entity&gt;\n</code></pre>"},{"location":"ldlib/compass/scene/#remove-entity","title":"<code>&lt;remove-entity/&gt;</code>","text":"<pre><code>&lt;!-- remove entity by id--&gt;\n&lt;remove-entity id=\"12\" force=\"true\"/&gt;\n</code></pre>"},{"location":"ldlib/compass/scene/#modify-entity","title":"<code>&lt;modify-entity/&gt;</code>","text":"<pre><code>&lt;!-- modify entity's tag and position by id--&gt;\n&lt;modify-entity pos=\"3 0 3\" id=\"12\"&gt;\n    &lt;nbt&gt;\n        {\n            Inventory: [\n                {\n                    Count: 1b,\n                    Slot: 0b,\n                    id: \"minecraft:stone_sword\",\n                    tag: {\n                        Damage: 0\n                    }\n                }\n            ],\n            SelectedItemSlot: 0,\n            Rotation: [\n                -30f,\n                0f\n            ]\n        }\n    &lt;/nbt&gt;\n&lt;/modify-entity&gt;\n</code></pre>"},{"location":"ldlib/compass/scene/#rotation","title":"<code>&lt;rotation/&gt;</code>","text":"<pre><code>&lt;!--rotate the scene view--&gt;\n&lt;rotation degree=\"90\"/&gt;\n</code></pre>"},{"location":"ldlib/compass/scene/#hightlight","title":"<code>&lt;hightlight/&gt;</code>","text":"<pre><code>&lt;!--hightlight a block or a face of the block--&gt;\n&lt;highlight pos=\"0 0 0\" duration=\"70\"/&gt;\n&lt;highlight pos=\"0 0 0\" face=\"UP\" duration=\"70\"/&gt;\n</code></pre>"},{"location":"ldlib/compass/scene/#tooltip","title":"<code>&lt;tooltip/&gt;</code>","text":"<pre><code>&lt;!--Point to a location in the scene and provide a description--&gt;\n&lt;tooltip pos=\"1.5 1.5 0.5\" screen-offset=\"0.6 0.5\" duration = \"60\" item=\"minecraft:flint_and_steel\"&gt;\n    &lt;!--pos: position in the scene, screen-offset: description positon in the compass view--&gt;\n    lit = &lt;style color=\"0xff00ff00\"&gt;true&lt;/style&gt;\n&lt;/tooltip&gt;\n</code></pre>"},{"location":"ldlib/compass/scene/#example","title":"Example","text":"<p>Now lets review the compass structure:</p> <p></p> <p>Lets check how do the aboves actions look like!!</p> <p></p> <pre><code>&lt;page&gt;\n    &lt;compass tick-scene=\"true\"&gt; &lt;!-- scene=\"true\" height=\"250\" zoom=\"28\" range=\"5\" draggable=\"false\" scalable=\"false\" camera=\"perspective\" yaw=\"25\" tick-scene=\"false\" can also be set here--&gt;\n        &lt;!-- Frames divide the animation into different parts, similar to how the animation is segmented in a ponder. Frames are executed sequentially.--&gt;\n        &lt;frame&gt; &lt;!-- duration=\"-1\" delay=\"0\"--&gt;\n            &lt;description&gt;\n                &lt;!-- Describes the frame, shows it on hovertooltips, and has the same syntax as the text label--&gt;\n                section 1.\n            &lt;/description&gt;\n            &lt;!--actions--&gt;\n            &lt;!--Actions are executed sequentially, and the next action is executed if and only if the last action is completed, but this can be adjusted using the following attributes, similar to ppt animation.\n                delay=\"0\"\n                start-before-last=\"false\"\n            --&gt;\n\n            &lt;!--Action information: display text and images on top--&gt;\n            &lt;information type=\"item\" url=\"minecraft:apple\"&gt;\n                &lt;style bold=\"true\" color=\"#ffff0000\"&gt;&lt;lang key=\"ldlib.author\"/&gt;&lt;/style&gt;\n            &lt;/information&gt;\n\n            &lt;!--Action scene: Animate the scene. Notice that all the operations under the &lt;scene/&gt; are happening simultaneously. More than one &lt;scene/&gt; label should be used when the operation is sequential--&gt;\n            &lt;scene start-before-last=\"true\"&gt;\n                &lt;!--add block to the scene with animation--&gt;\n                &lt;add pos=\"0 0 0\" block=\"minecraft:glass\"/&gt;\n                &lt;!--add block with properties--&gt;\n                &lt;add pos=\"1 1 0\" block=\"minecraft:campfire\"&gt;\n                    &lt;properties name=\"lit\" value=\"false\"/&gt;\n                &lt;/add&gt;\n                &lt;!--add block with nbt for blockentity--&gt;\n                &lt;add pos=\"3 0 1\" block=\"minecraft:chest\"&gt;\n                    &lt;nbt&gt;\n                        {\n                            Items: [\n                                {\n                                    Count: 63b,\n                                    Slot: 0b,\n                                    id: \"minecraft:coal_block\"\n                                }\n                            ]\n                        }\n                    &lt;/nbt&gt;\n                &lt;/add&gt;\n                &lt;add pos=\"0 1 0\" offset=\"3 1 0\" duration=\"40\" block=\"minecraft:glass\"/&gt;\n                &lt;!--offset: animation offset, duration: animation duration--&gt;\n            &lt;/scene&gt;\n            &lt;scene&gt;\n                &lt;!--modify a block, its kinda similar to the add label but without animation --&gt;\n                &lt;modify pos=\"1 1 0\" block=\"minecraft:campfire\"&gt;\n                    &lt;properties name=\"lit\" value=\"true\"/&gt;\n                &lt;/modify&gt;\n            &lt;/scene&gt;\n            &lt;scene&gt;\n                &lt;!--remove block from the scene with animation--&gt;\n                &lt;remove pos=\"0 0 0\" offset=\"3 1 0\" duration=\"40\"/&gt;\n            &lt;/scene&gt;\n            &lt;scene&gt;\n                &lt;!--Point to a location in the scene and provide a description--&gt;\n                &lt;tooltip pos=\"1.5 1.5 0.5\" screen-offset=\"0.6 0.5\" duration = \"60\" item=\"minecraft:flint_and_steel\"&gt;\n                    &lt;!--pos: position in the scene, screen-offset: description positon in the compass view--&gt;\n                    lit = &lt;style color=\"0xff00ff00\"&gt;true&lt;/style&gt;\n                &lt;/tooltip&gt;\n            &lt;/scene&gt;\n            &lt;scene&gt;\n                &lt;!--hightlight a block or a face of the block--&gt;\n                &lt;highlight pos=\"0 0 0\" duration=\"70\"/&gt;\n                &lt;highlight pos=\"0 0 0\" face=\"UP\" duration=\"70\"/&gt;\n            &lt;/scene&gt;\n            &lt;scene&gt;\n                &lt;!--rotate the scene view--&gt;\n                &lt;rotation degree=\"90\"/&gt;\n            &lt;/scene&gt;\n        &lt;/frame&gt;\n        &lt;frame&gt;\n            &lt;description&gt;\n                &lt;!-- Describes the frame, shows it on hovertooltips, and has the same syntax as the text label--&gt;\n                section 2.\n            &lt;/description&gt;\n            &lt;scene&gt;\n                &lt;!-- add entities by its type name. You have to allocate it an id, or a random id will be generated--&gt;\n                &lt;add-entity pos=\"0 1 0\" type=\"minecraft:player\" id=\"12\"/&gt;\n                &lt;!-- add entities with tag--&gt;\n                &lt;add-entity pos=\"0.5 3 0.5\" type=\"minecraft:item\" id=\"2\"&gt;\n                    &lt;nbt&gt;\n                        {\n                            Item: {\n                                Count: 64b,\n                                id: \"minecraft:spruce_door\"\n                            }\n                        }\n                    &lt;/nbt&gt;\n                &lt;/add-entity&gt;\n            &lt;/scene&gt;\n        &lt;/frame&gt;\n        &lt;frame delay=\"40\"&gt;\n            &lt;description&gt;\n                &lt;!-- Describes the frame, shows it on hovertooltips, and has the same syntax as the text label--&gt;\n                section 3.\n            &lt;/description&gt;\n            &lt;scene&gt;\n                &lt;!-- modify entity's tag and position by id--&gt;\n                &lt;modify-entity pos=\"3 0 3\" id=\"12\"&gt;\n                    &lt;nbt&gt;\n                        {\n                            Inventory: [\n                                {\n                                    Count: 1b,\n                                    Slot: 0b,\n                                    id: \"minecraft:stone_sword\",\n                                    tag: {\n                                        Damage: 0\n                                    }\n                                }\n                            ],\n                            SelectedItemSlot: 0,\n                            Rotation: [\n                                -30f,\n                                0f\n                            ]\n                        }\n                    &lt;/nbt&gt;\n                &lt;/modify-entity&gt;\n            &lt;/scene&gt;\n            &lt;scene&gt;\n                &lt;rotation degree=\"180\"/&gt;\n                &lt;tooltip pos=\"3 0.7 3\" duration=\"60\" screen-offset=\"0.2 0.5\"&gt;\n                    Carry a sword to fight!\n                &lt;/tooltip&gt;\n            &lt;/scene&gt;\n            &lt;scene&gt;\n                &lt;!-- remove entity by id--&gt;\n                &lt;remove-entity id=\"12\" force=\"true\"/&gt;\n            &lt;/scene&gt;\n        &lt;/frame&gt;\n    &lt;/compass&gt;\n&lt;/page&gt;\n</code></pre>"},{"location":"ldlib/compass/xml/","title":"Compass XML","text":"<p>We will breifly inllustrates labels in the xml.</p>"},{"location":"ldlib/compass/xml/#generic-attributes","title":"generic attributes","text":"<pre><code>&lt;page&gt;\n  &lt;xxx top-margin=\"10\" bottom-margin=\"10\" left-margin=\"10\", right-margin=\"10\"&gt;\n  &lt;!--margin is a generic property that represents the amount of space reserved between the previous component and the next component. The default is 0.--&gt;\n  &lt;/xxx&gt;\n&lt;/page&gt;\n</code></pre>"},{"location":"ldlib/compass/xml/#header","title":"Header","text":"<pre><code>&lt;page&gt;\n    &lt;h1&gt;Title H1 &lt;lang key=\"ldlib.author\"/&gt;&lt;/h1&gt; &lt;!-- label &lt;lang/&gt; can be used to load text according to the lang key --&gt;\n    &lt;h2&gt;Title H2&lt;/h2&gt;\n    &lt;h3&gt;Title H3&lt;/h3&gt;\n    &lt;!-- attributes--&gt;\n    &lt;h1 space=\"2\" font-size=\"9\" isCenter=\"false\" isShadow=\"true\"&gt; &lt;!-- space: row spacing--&gt;\n&lt;/page&gt;\n</code></pre>"},{"location":"ldlib/compass/xml/#blank","title":"Blank","text":"<pre><code>&lt;page&gt;\n    &lt;br height=\"20\"/&gt; &lt;!--blank height--&gt;\n&lt;/page&gt;\n</code></pre>"},{"location":"ldlib/compass/xml/#text","title":"Text","text":"<pre><code>&lt;page&gt;\n    &lt;text&gt;\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n        &lt;style underlined=\"true\" link=\"ldlib:test_node2\"&gt;\n            link to node2\n        &lt;/style&gt;\n        &lt;style underlined=\"true\" url-link=\"https://github.com/Low-Drag-MC/LDLib-Architectury\"&gt;\n            link to url\n        &lt;/style&gt;\n        sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n        &lt;style color=\"#ffff0000\" hover-info=\"hover tooltips\"&gt;\n            Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi\n            ut aliquip ex ea commodo consequat.\n        &lt;/style&gt;\n        &lt;br/&gt;\n        Duis aute irure dolor in reprehenderit\n        in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n    &lt;/text&gt;\n    &lt;!-- attributes--&gt;\n    &lt;text space=\"2\" isCenter=\"false\"&gt;\n        &lt;br/&gt; &lt;!--new line--&gt;\n        &lt;lang key=\"ldlib.author\"/&gt; &lt;!-- used to load text according to the lang key --&gt;\n        &lt;style color=\"#ffffffff\" bold=\"false\" italic=\"false\" underlined=\"false\" strikethrough=\"false\" obfuscated=\"false\"&gt; \n            &lt;!--The style of the text in the range--&gt;\n        &lt;/style&gt;\n        &lt;style hover-info=\"hover tooltips\" link=\"ldlib:my_node_2\"&gt; \n            &lt;!--link will jump to the given node while click--&gt;\n        &lt;/style&gt;\n    &lt;/text&gt;\n&lt;/page&gt;\n</code></pre>"},{"location":"ldlib/compass/xml/#image","title":"Image","text":"<pre><code>&lt;page&gt;\n    &lt;image width=\"160\" height=\"40\" type=\"resource\" top-margin=\"10\" bottom-margin=\"10\" url=\"gtceu:textures/gt_logo_long.png\" hover-info=\"tooltips\"&gt;\n        &lt;!-- same as the text label here --&gt;\n        description of the image.\n    &lt;/image&gt;\n    &lt;image width=\"100\" height=\"100\" type=\"item\" item=\"minecraft:stone\"/&gt;\n&lt;/page&gt;\n</code></pre>"},{"location":"ldlib/compass/xml/#recipe","title":"Recipe","text":"<pre><code>&lt;page&gt;\n    &lt;recipe id=\"minecraft:barrel\"/&gt; &lt;!--recipe id--&gt;\n&lt;/page&gt;\n</code></pre>"},{"location":"ldlib/compass/xml/#ingredient","title":"Ingredient","text":"<pre><code>&lt;page&gt;\n    &lt;ingredient&gt;\n    &lt;item item=\"minecraft:stick\" count=\"3\"/&gt;\n    &lt;item tag=\"minecraft:ores\" forge-tag=\"forge:ores/gold\" fabric-tag=\"c:ores/gold\" count=\"64\"/&gt;\n    &lt;fluid fluid=\"minecraft:lava\" count=\"64000\"/&gt;\n    &lt;/ingredient&gt;\n&lt;/page&gt;\n</code></pre>"},{"location":"ldlib/compass/xml/#scene","title":"Scene","text":"<pre><code>&lt;page&gt;\n    &lt;scene height=\"300\"&gt; &lt;!-- draggable=\"false\" scalable=\"false\" zoom=\"6\" camera=\"perspective\"  yaw=\"25\"can also be set here--&gt;\n    &lt;page&gt;\n        &lt;block pos=\"0 0 0\" block=\"minecraft:glass\"/&gt;\n        &lt;block pos=\"1 0 0\" block=\"minecraft:dirt\" item-tips=\"true\"/&gt;\n        &lt;block pos=\"0 0 1\" block=\"minecraft:furnace\"&gt;hover info&lt;/block&gt;\n    &lt;/page&gt;\n         &lt;page&gt;\n        &lt;block pos=\"0 0 0\" block=\"minecraft:redstone\"/&gt;\n        &lt;block pos=\"1 0 0\" block=\"minecraft:wool\" item-tips=\"true\"/&gt;\n        &lt;block pos=\"0 0 1\" block=\"minecraft:grass\"&gt;hover info&lt;/block&gt;\n    &lt;/page&gt;\n    &lt;/scene&gt;\n&lt;/page&gt;\n</code></pre>"},{"location":"ldlib/compass/xml/#storyline-scene","title":"Storyline Scene","text":"<p>Please refer to the page Compass Scene</p>"},{"location":"ldlib/compass/xml/#useful-command-to-get-the-nbt-of-the-blockentityentity","title":"Useful command to get the nbt of the blockentity/entity.","text":"<p>It's inevitable that when you're writing a scene you'll come across some blocks/entities that require nbt to be set. </p> <p>while you can get it by <code>/data get block/entity</code> you can't copy it in the game.</p> <p>Ldlib provides a command to help you get the nbt of a block/entity in your game and copy it to the clipboard.</p> <p><code>/ldlib copy_block_tag [pos]</code> / <code>/ldlib copy_entity_tag [entity_selector]</code>: chat panel will show the tag when you execute this command. and you mouse click the <code>[Copy to clipboard]</code> in the chat panel to copy to the clipboard.</p>"},{"location":"ldlib/ui/","title":"Introduction","text":"<p>LDLib provides a wide range of ready-to-use components, allowing you to create GUI with advanced UI controls. Additionally, LDLib offers a visual editor, enabling you to design UIs without writing a single line of code.  </p> <p>We provide two methods for creating UI:  </p> <ol> <li>Java / KubeJS </li> <li>UI Editor </li> </ol> <p>Of course, you can also combine both methods. For example, you can use the <code>UI Editor</code> to design the UI and then use <code>Java</code> or <code>KubeJS</code> to add interaction logic\u2014which is our recommended approach.</p> <p>Refer to the Widgets to check all widgets in details.</p>"},{"location":"ldlib/ui/code/","title":"Get Started","text":"<p>Creating UI using <code>Java</code> and <code>KubeJS</code> is mostly the same. This page will introduce the basic workflow of creating and using a UI.  </p> <p>The entire UI creation and usage pipeline consists of the following steps:</p> <ol> <li> <p>Create UI widget and layout (1)</p> <ol> <li> Create <code>buttons</code> and <code>item slots</code>, set their positions...</li> </ol> </li> <li> <p>Bind UI functional logic (1)</p> <ol> <li> Add logic to be executed when a <code>button</code> is clicked, bind <code>inventory</code> to <code>item slots</code>...</li> </ol> </li> <li> <p>Display the UI (1)</p> <ol> <li> Open the <code>GUI</code> when <code>right-clicking</code> an item, open the <code>GUI</code> when <code>right-clicking</code> a block...</li> </ol> </li> </ol> <p>Technically, the <code>UI function binding</code> and <code>UI widget creation</code> processes happen simultaneously, as many controls provide constructors that bind functions at the same time.  </p> <p>On this page, we separate step 1 and step 2 in the code examples to provide a clearer understanding of how the <code>UI</code> works.</p>"},{"location":"ldlib/ui/code/#create-ui-widgets-and-layout","title":"Create <code>UI</code> Widgets and Layout","text":"<p>Let's begin with a <code>WigetGroup</code>, which is a container of child widgtes. Therefore, we create a <code>WidgetGroup</code> as a root widget. Check all widgets <code>here</code>.</p> <p>Then, we add a <code>Label</code> and a <code>Button</code> into it.</p> JavaKubeJS <pre><code>public WidgetGroup createUI() {\n    // create a root container\n    var root = new WidgetGroup();\n    root.setSize(100, 100);\n    root.setBackground(ResourceBorderTexture.BORDERED_BACKGROUND);\n\n    // create a label and a button\n    var label = new LabelWidget();\n    label.setSelfPosition(20, 20);\n    label.setText(\"Hello, World!\");\n    var button = new ButtonWidget();\n    button.setSelfPosition(20, 60);\n    button.setSize(60, 20);\n    // prepare button textures\n    var backgroundImage = ResourceBorderTexture.BUTTON_COMMON;\n    var hoverImage = backgroundImage.copy().setColor(ColorPattern.CYAN.color);\n    var textAbove = new TextTexture(\"Click me!\");\n    button.setButtonTexture(backgroundImage, textAbove);\n    button.setClickedTexture(hoverImage, textAbove);\n\n    // add the label and button to the root container\n    root.addWidgets(label, button);\n    return root;\n}\n</code></pre> <pre><code>function createUI() {\n    // create a root container\n    let root = new WidgetGroup();\n    root.setSize(100, 100);\n    root.setBackground(ResourceBorderTexture.BORDERED_BACKGROUND);\n\n    // create a label and a button\n    let label = new LabelWidget();\n    label.setSelfPosition(20, 20);\n    label.setText(\"Hello, World!\");\n    let button = new ButtonWidget();\n    button.setSelfPosition(20, 60);\n    button.setSize(60, 20);\n    // prepare button textures\n    let backgroundImage = ResourceBorderTexture.BUTTON_COMMON;\n    let hoverImage = backgroundImage.copy().setColor(ColorPattern.CYAN.color);\n    let textAbove = new TextTexture(\"Click me!\");\n    button.setButtonTexture(backgroundImage, textAbove);\n    button.setClickedTexture(hoverImage, textAbove);\n\n    // add the label and button to the root container\n    root.addWidgets(label, button);\n    return root;\n}\n</code></pre>      Your browser does not support video."},{"location":"ldlib/ui/code/#bind-ui-functional-logic","title":"Bind UI functional logic","text":"<p>After the creation of the ui, we should implement the logic of the ui. For example, we want to click the button to change the label text.</p> JavaKubeJS <pre><code>public WidgetGroup createUI() {\n    // creation of the ui\n    // ....\n\n    // click logic\n    AtomicInteger counter = new AtomicInteger(0);\n    button.setOnPressCallback(clickData -&gt; {\n        label.setText(\"Clicked \" + counter.incrementAndGet() + \" times!\");\n    });\n\n    return root;\n}\n</code></pre> <pre><code>function createUI() {\n    // creation of the ui\n    // ....\n\n    // click logic\n    let counter = 0;\n    button.setOnPressCallback(clickData =&gt; {\n        counter++;\n        label.setText(\"Clicked \" + counter + \" times!\");\n    });\n\n    return root;\n}\n</code></pre>      Your browser does not support video."},{"location":"ldlib/ui/code/#display-the-ui","title":"Display the UI","text":"<p>Now, let's display the ui we create! We need to specify a <code>UI Factory</code> to display the ui, which maintains the lifecycle of the ui. </p> <p>There are four steps:</p> <ol> <li><code>open ui</code></li> <li><code>create UI in server side</code></li> <li><code>notify to open UI</code></li> <li><code>create UI in remote side</code></li> </ol> <pre><code>sequenceDiagram\n  autonumber\n  Note left of Server: 1. open UI\n  Note left of Server: 2. create UI in server side\n  Server-&gt;&gt;Remote: 3. notify to open UI\n  Note right of Remote: 4. create UI in remote side\n</code></pre> <p><code>UI Factory</code> will help handle the <code>step 3</code>. Therefore, user should define WHEN to trigger <code>step 1</code>, and WHAT to be createed in <code>step 2</code> and <code>step 4</code>. In general, the UI created on the server side and the remote side is the same in most cases.</p> <p>LDLib provides two built-in factories:</p> <ol> <li>Block Entity UI Factory</li> <li>Held Item UI Factory</li> </ol>"},{"location":"ldlib/ui/code/#block-entity-ui-factory","title":"Block Entity UI Factory","text":"<p>This factory allows user to open the ui from a block.</p>"},{"location":"ldlib/ui/code/#java","title":"Java","text":"<ol> <li> <p>Java user should implement <code>IUIHolder.Block</code> for your own <code>BlockEntity</code> and implement the method <code>createUI(Player entityPlayer)</code>.</p> </li> <li> <p>Call the method <code>BlockEntityUIFactory.INSTANCE.openUI()</code> when you want to open the ui.</p> </li> </ol>"},{"location":"ldlib/ui/code/#kubejs","title":"KubeJS","text":"<p>KubeJS user can do the same thing in an easy way. User can even open the ui for the block (without entity), but less accessibility compared with Java.</p> <ol> <li>KubeJS user should use <code>LDLibUI.block(ui_name, e =&gt; {})</code> to create the ui by the given <code>ui_name</code>.</li> <li>Call the method <code>BlockUIFactory.INSTANCE.openUI(player, pos, ui_name)</code> when you want to open the ui.</li> </ol> JavaKubeJS <pre><code>public class TestBlockEntity extends BlockEntity implements IUIHolder {\n\n    public void onPlayerUse(Player player) {\n        // step 1 here.\n        if (player instanceof ServerPlayer serverPlayer) {\n            BlockEntityUIFactory.INSTANCE.openUI(this, serverPlayer);\n        }\n    }\n\n    private WidgetGroup createUI() {\n        // ....\n    }\n\n    @Override\n    public ModularUI createUI(Player entityPlayer) {\n        // step 2 and step 4 here \n        return new ModularUI(createUI(), this, entityPlayer);\n    }\n}\n</code></pre> <pre><code>// server script\n\nBlockEvents.rightClicked('test_block_ui', event =&gt; { \n    // step 1 here.\n    BlockUIFactory.INSTANCE.openUI(event.player, event.block.pos);\n})\n\nfunction createUI() {\n    // ....\n}\n\nLDLibUI.block(\"test_block_ui\", e =&gt; { \n    // step 2 and step 4 here \n\n    // let level = e.level\n    // let pos = e.pos\n    // let block = e.block\n    // let player = e.player\n\n    var ui = createUI();\n    e.success(ui);\n})\n</code></pre>"},{"location":"ldlib/ui/code/#held-item-ui-factory","title":"Held Item UI Factory","text":"<p>This factory allows user to open the ui from the held item.</p>"},{"location":"ldlib/ui/code/#java_1","title":"Java","text":"<ol> <li> <p>Java user should implement <code>IUIHolder.Item</code> for your own <code>Item</code> and implement the method <code>createUI(Player entityPlayer, HeldItemUIFactory.HeldItemHolder holder)</code>.</p> </li> <li> <p>Call the method <code>HeldItemUIFactory.INSTANCE.openUI()</code> when you want to open the ui.</p> </li> </ol>"},{"location":"ldlib/ui/code/#kubejs_1","title":"KubeJS","text":"<p>KubeJS user can do the same thing in an easy way. User can even open the ui for the block (without entity), but less accessibility compared with Java.</p> <ol> <li>KubeJS user should use <code>LDLibUI.item(ui_name, e =&gt; {})</code> to create the ui by the given <code>ui_name</code>.</li> <li>Call the method <code>ItemUIFactory.INSTANCE.openUI(player, hand, ui_name)</code> when you want to open the ui.</li> </ol> JavaKubeJS <pre><code>public class TestItem implements IUIHolder.Item {\n    @Override\n    public InteractionResult useOn(UseOnContext context) {\n        // step 1 here.\n        if (context.getPlayer() instanceof ServerPlayer serverPlayer) {\n            HeldItemUIFactory.INSTANCE.openUI(serverPlayer, context.getHand());\n        }\n        return InteractionResult.SUCCESS;\n    }\n\n    private WidgetGroup createUI() {\n        // ....\n    }\n\n    @Override\n    public ModularUI createUI(Player entityPlayer, HeldItemUIFactory.HeldItemHolder holder) {\n        // step 2 and step 4\n        return new ModularUI(createUI(), holder, entityPlayer);\n    }\n}\n</code></pre> <pre><code>// server script\n\nItemEvents.firstRightClicked('minecraft:stick', event =&gt; {\n    // step 1 here.\n    ItemUIFactory.INSTANCE.openUI(event.player, event.hand, \"test_item_ui\");\n})\n\nfunction createUI() {\n    // ....\n}\n\nLDLibUI.item(\"test_item_ui\", e =&gt; {\n    // step 2 and step 4\n\n    // let player = e.player\n    // let hand = e.hand\n    // let held = e.held\n\n    var ui = createUI();\n    e.success(ui);\n})\n</code></pre>      Your browser does not support video."},{"location":"ldlib/ui/code/load_ui_file/","title":"Load UI from file","text":"<p>Through creating UI by code has more flexibility, using <code>UI Editor</code> instead is more intuitive and easy for novice. The ideal approuch is to design the ui layout via the Editor and bind UI functional logic via code.</p> <p>before reading</p> <p>Make sure you has basic knowledge of how to create the ui via <code>UI Editor</code> and prepare a ui file for loading.</p> <p>Loading ui file is realy easy, just few lines code. We suppose you have a ui file with the location <code>.minecraft/ldlib/assets/ldlib/projects/ui/test_ui.ui</code>.</p> <p></p> <p>You can get a <code>creator</code> via the method <code>UIProject.loadUIFromFile(location)</code>. <code>creator</code> caches the resources to speed up the creation process which should be stored for the same project loading.</p> <p>Warning</p> <p><code>creator</code> may be null if the ui file counld not be loaded.</p> JavaKubeJS <pre><code>public WidgetGroup createUI() {\n    var creator = UIProject.loadUIFromFile(new ResourceLocation(\"ldlib:test_ui.ui\"));\n    // creator caches the resources to speed up the creation process.\n    // you should better store it for the same project loading.\n    return creator.get();\n}\n</code></pre> <pre><code>function createUI() {\n    let creator = UIProject.loadUIFromFile(\"ldlib:test_ui.ui\");\n    // creator caches the resources to speed up the creation process.\n    // you should better store it for the same project loading.\n    return creator.get();\n}\n</code></pre>"},{"location":"ldlib/ui/code/load_ui_file/#bind-ui-functional-logic","title":"Bind UI functional logic","text":"<p>After loading the ui project, we should bind the functional logic for it. First, we should get the instance of the widget. LDLib provide two methods to obtain it:</p> <ol> <li><code>List&lt;Widget&gt; getWidgetsById(regex)</code>: Get all widgets based on a regex pattern and return all of them.</li> <li><code>Widget getFirstWidgetById(regex)</code>: Get all widgets based on a regex pattern and return the first one.</li> </ol> <p>Note</p> <p>Do not forget to assign an <code>id</code> to the widgets you need. </p> JavaKubeJS <pre><code>public WidgetGroup createUI() {\n    var creator = UIProject.loadUIFromFile(new ResourceLocation(\"ldlib:test_ui.ui\"));\n    // creator caches the resources to speed up the creation process.\n    // you should better store it for the same project loading.\n    var root = creator.get();\n\n    var button = root.getFirstWidgetById(\"button_id\");\n    if (button != null) {\n        button.setOnPressCallback(clickData -&gt; {\n            System.out.println(clickData.isShiftClick);\n        });\n    }\n\n    return root;\n}\n</code></pre> <pre><code>function createUI() {\n    let creator = UIProject.loadUIFromFile(\"ldlib:test_ui.ui\");\n    // creator caches the resources to speed up the creation process.\n    // you should better store it for the same project loading.\n    let root = creator.get();\n\n    let button = root.getFirstWidgetById(\"button_id\");\n    if (button != null) {\n        button.setOnPressCallback(clickData =&gt; {\n            console.log(clickData.isShiftClick);\n        });\n    }\n\n    return root;\n}\n</code></pre>"},{"location":"ldlib/ui/textures/","title":"Preliminary","text":"<p><code>GUI Texture</code> is widely used for background setup, image dispaly, etc. LDLib provides lots of different textures. Textures have some generic functions.</p>"},{"location":"ldlib/ui/textures/#basic-properties","title":"Basic Properties","text":"Field Description xOffset Horizontal offset yOffset Vertical offset scale Scale factor (default is 1) rotation Rotation angle in degrees"},{"location":"ldlib/ui/textures/#apis","title":"APIs","text":""},{"location":"ldlib/ui/textures/#rotate","title":"rotate","text":"<p>Sets the rotation angle.</p> Java / KubeJS <pre><code>texture.rotate(45);\n</code></pre>"},{"location":"ldlib/ui/textures/#scale","title":"scale","text":"<p>Sets the scale factor.</p> Java / KubeJS <pre><code>texture.scale(1.5);\n</code></pre>"},{"location":"ldlib/ui/textures/#transform","title":"transform","text":"<p>Sets the horizontal and vertical offset.</p> Java / KubeJS <pre><code>texture.transform(10, 20);\n</code></pre>"},{"location":"ldlib/ui/textures/#copy","title":"copy","text":"<p>Creates a copy of the texture.</p> Java / KubeJS <pre><code>var copiedTexture = texture.copy();\n</code></pre>"},{"location":"ldlib/ui/textures/animation/","title":"AnimationTexture","text":""},{"location":"ldlib/ui/textures/animation/#basic-properties","title":"Basic Properties","text":"Field Description imageLocation The resource location for the image cellSize The size of each cell in the texture grid from The starting cell index for animation to The ending cell index for animation animation The animation speed value color The color overlay applied to the texture"},{"location":"ldlib/ui/textures/animation/#apis","title":"APIs","text":""},{"location":"ldlib/ui/textures/animation/#settexture","title":"setTexture","text":"<p>Sets the texture</p> Java / KubeJS <pre><code>animationTexture.setTexture(\"ldlib:textures/gui/particles.png\");\n</code></pre>"},{"location":"ldlib/ui/textures/animation/#setcellsize","title":"setCellSize","text":"<p>Sets the cell size. Refer to how many cells does the animation texture need to be divided into (side length).</p> Java / KubeJS <pre><code>animationTexture.setCellSize(8);\n</code></pre>"},{"location":"ldlib/ui/textures/animation/#setanimation","title":"setAnimation","text":"<p>Sets the animation range <code>from</code> which cell <code>to</code> which cell.</p> Java / KubeJS <pre><code>animationTexture.setAnimation(32, 44);\n</code></pre>"},{"location":"ldlib/ui/textures/animation/#setanimation_1","title":"setAnimation","text":"<p>Sets the animation speed. Tick time between cells.</p> Java / KubeJS <pre><code>animationTexture.setAnimation(1);\n</code></pre>"},{"location":"ldlib/ui/textures/animation/#setcolor","title":"setColor","text":"<p>Sets the texture color.</p> Java / KubeJS <pre><code>animationTexture.setColor(0xff000000);\n</code></pre>"},{"location":"ldlib/ui/textures/border/","title":"ColorBorderTexture","text":""},{"location":"ldlib/ui/textures/border/#basic-properties","title":"Basic Properties","text":"Field Description color The color applied to the border border The border width radiusLTInner Top-left inner corner radius radiusLBInner Bottom-left inner corner radius radiusRTInner Top-right inner corner radius radiusRBInner Bottom-right inner corner radius radiusLTOuter Top-left outer corner radius radiusLBOuter Bottom-left outer corner radius radiusRTOuter Top-right outer corner radius radiusRBOuter Bottom-right outer corner radius"},{"location":"ldlib/ui/textures/border/#apis","title":"APIs","text":""},{"location":"ldlib/ui/textures/border/#setborder","title":"setBorder","text":"<p>Sets the border width.</p> Java / KubeJS <pre><code>colorBorderTexture.setBorder(5);\n</code></pre>"},{"location":"ldlib/ui/textures/border/#setcolor","title":"setColor","text":"<p>Sets the border color.</p> Java / KubeJS <pre><code>colorBorderTexture.setColor(0xff00ff);\n</code></pre>"},{"location":"ldlib/ui/textures/border/#setradius","title":"setRadius","text":"<p>Sets uniform inner and outer radii based on the provided radius and current border.</p> Java / KubeJS <pre><code>colorBorderTexture.setRadius(10);\n</code></pre>"},{"location":"ldlib/ui/textures/border/#setleftradius","title":"setLeftRadius","text":"<p>Sets the left-side radii for both inner and outer corners.</p> Java / KubeJS <pre><code>colorBorderTexture.setLeftRadius(8);\n</code></pre>"},{"location":"ldlib/ui/textures/border/#setrightradius","title":"setRightRadius","text":"<p>Sets the right-side radii for both inner and outer corners.</p> Java / KubeJS <pre><code>colorBorderTexture.setRightRadius(8);\n</code></pre>"},{"location":"ldlib/ui/textures/border/#settopradius","title":"setTopRadius","text":"<p>Sets the top-side radii for both inner and outer corners.</p> Java / KubeJS <pre><code>colorBorderTexture.setTopRadius(8);\n</code></pre>"},{"location":"ldlib/ui/textures/border/#setbottomradius","title":"setBottomRadius","text":"<p>Sets the bottom-side radii for both inner and outer corners.</p> Java / KubeJS <pre><code>colorBorderTexture.setBottomRadius(8);\n</code></pre>"},{"location":"ldlib/ui/textures/group/","title":"GuiTextureGroup","text":""},{"location":"ldlib/ui/textures/group/#basic-properties","title":"Basic Properties","text":"Field Description textures An array of textures used in the group"},{"location":"ldlib/ui/textures/group/#apis","title":"APIs","text":""},{"location":"ldlib/ui/textures/group/#settextures","title":"setTextures","text":"<p>Sets the textures used in the group.</p> Java / KubeJS <pre><code>guiTextureGroup.setTextures(texture1, texture2);\n</code></pre>"},{"location":"ldlib/ui/textures/group/#setcolor","title":"setColor","text":"<p>Sets the color for all textures in the group.</p> Java / KubeJS <pre><code>guiTextureGroup.setColor(0xff00ff);\n</code></pre>"},{"location":"ldlib/ui/textures/itemstack/","title":"ItemStackTexture","text":"<p><code>ItemStackTexture</code> will display items in a loop.</p>"},{"location":"ldlib/ui/textures/itemstack/#basic-properties","title":"Basic Properties","text":"Field Description items Array of item stacks used by the texture color Color overlay applied to the item stack texture"},{"location":"ldlib/ui/textures/itemstack/#apis","title":"APIs","text":""},{"location":"ldlib/ui/textures/itemstack/#setitems","title":"setItems","text":"<p>Sets the items.</p> Java / KubeJS <pre><code>itemStackTexture.setItems(item1, item2);\n</code></pre>"},{"location":"ldlib/ui/textures/itemstack/#setcolor","title":"setColor","text":"<p>Sets the color overlay for the item stack texture.</p> Java / KubeJS <pre><code>itemStackTexture.setColor(0xffff00ff);\n</code></pre>"},{"location":"ldlib/ui/textures/progress/","title":"ProgressTexture","text":"<p>The <code>ProgressTexture</code> is used to render a progress bar texture that fills according to a specified direction. It combines an empty and a filled texture area to visually represent progress.</p>"},{"location":"ldlib/ui/textures/progress/#basic-properties","title":"Basic Properties","text":"Field Description fillDirection The direction in which the progress fills emptyBarArea Texture used for the empty portion of the progress bar filledBarArea Texture used for the filled portion of the progress bar progress The current progress value (0.0 to 1.0)"},{"location":"ldlib/ui/textures/progress/#apis","title":"APIs","text":""},{"location":"ldlib/ui/textures/progress/#settexture","title":"setTexture","text":"<p>Sets the progress textures. <code>emptyBarArea</code> and <code>filledBarArea</code> can any type of the <code>GUi Texture</code>.</p> Java / KubeJS <pre><code>progressTexture.setTexture(emptyBarArea, filledBarArea);\n</code></pre>"},{"location":"ldlib/ui/textures/progress/#setprogress","title":"setProgress","text":"<p>Sets the progress value.</p> Java / KubeJS <pre><code>progressTexture.setProgress(0.75);\n</code></pre>"},{"location":"ldlib/ui/textures/progress/#setfilldirection","title":"setFillDirection","text":"<p>Sets the fill direction for the progress bar.</p> Java / KubeJS <pre><code>progressTexture.setFillDirection(ProgressTexture.FillDirection.RIGHT_TO_LEFT);\n</code></pre>"},{"location":"ldlib/ui/textures/rect/","title":"ColorRectTexture","text":""},{"location":"ldlib/ui/textures/rect/#basic-properties","title":"Basic Properties","text":"Field Description color The color applied to the rectangle radiusLT Top-left corner radius radiusLB Bottom-left corner radius radiusRT Top-right corner radius radiusRB Bottom-right corner radius"},{"location":"ldlib/ui/textures/rect/#apis","title":"APIs","text":""},{"location":"ldlib/ui/textures/rect/#setradius","title":"setRadius","text":"<p>Sets a uniform radius for all corners.</p> Java / KubeJS <pre><code>colorRectTexture.setRadius(10);\n</code></pre>"},{"location":"ldlib/ui/textures/rect/#setleftradius","title":"setLeftRadius","text":"<p>Sets the left-side radii (top and bottom) for the rectangle.</p> Java / KubeJS <pre><code>colorRectTexture.setLeftRadius(8);\n</code></pre>"},{"location":"ldlib/ui/textures/rect/#setrightradius","title":"setRightRadius","text":"<p>Sets the right-side radii (top and bottom) for the rectangle.</p> Java / KubeJS <pre><code>colorRectTexture.setRightRadius(8);\n</code></pre>"},{"location":"ldlib/ui/textures/rect/#settopradius","title":"setTopRadius","text":"<p>Sets the top-side radii (left and right) for the rectangle.</p> Java / KubeJS <pre><code>colorRectTexture.setTopRadius(8);\n</code></pre>"},{"location":"ldlib/ui/textures/rect/#setbottomradius","title":"setBottomRadius","text":"<p>Sets the bottom-side radii (left and right) for the rectangle.</p> Java / KubeJS <pre><code>colorRectTexture.setBottomRadius(8);\n</code></pre>"},{"location":"ldlib/ui/textures/resource/","title":"ResourceTexture","text":"<p>The <code>ResourceTexture</code> class extends <code>TransformTexture</code> to render textures based on a resource location. It supports configurable offsets, dimensions, and color overlays.</p>"},{"location":"ldlib/ui/textures/resource/#basic-properties","title":"Basic Properties","text":"Field Description imageLocation The resource location of the texture image offsetX Horizontal offset of the texture (default is 0) offsetY Vertical offset of the texture (default is 0) imageWidth Width factor of the texture (default is 1) imageHeight Height factor of the texture (default is 1) color Color overlay applied to the texture (default is -1)"},{"location":"ldlib/ui/textures/resource/#apis","title":"APIs","text":""},{"location":"ldlib/ui/textures/resource/#createtexture","title":"createTexture","text":"<p>Create a texture from a resource location.</p> Java / KubeJS <pre><code>// Using float parameters\nvar texture = new ResourceTexture(\"ldlib:textures/gui/icon.png\");\n</code></pre>"},{"location":"ldlib/ui/textures/resource/#getsubtexture","title":"getSubTexture","text":"<p>Returns a sub-texture of the current texture.</p> Java / KubeJS <pre><code>// Using float parameters\nvar subTexture = resourceTexture.getSubTexture(0.2, 0.2, 0.5, 0.5);\n</code></pre>"},{"location":"ldlib/ui/textures/resourceborder/","title":"ResourceBorderTexture","text":"<p>The <code>ResourceBorderTexture</code> class extends <code>ResourceTexture</code> to render textures with configurable borders. It calculates relative sizes for corners, edges, and the central area, enabling detailed customization for UI backgrounds and buttons.</p>"},{"location":"ldlib/ui/textures/resourceborder/#basic-properties","title":"Basic Properties","text":"Field Description boderSize The size of the border corners imageSize The overall size of the texture image imageLocation The resource location of the texture image"},{"location":"ldlib/ui/textures/resourceborder/#apis","title":"APIs","text":""},{"location":"ldlib/ui/textures/resourceborder/#setbodersize","title":"setBoderSize","text":"<p>Sets the size of the border corners.</p> Java / KubeJS <pre><code>resourceBorderTexture.setBoderSize(5, 5);\n</code></pre>"},{"location":"ldlib/ui/textures/resourceborder/#setimagesize","title":"setImageSize","text":"<p>Sets the overall size of the texture image.</p> Java / KubeJS <pre><code>resourceBorderTexture.setImageSize(200, 150);\n</code></pre>"},{"location":"ldlib/ui/textures/shader/","title":"ShaderTexture","text":"<p>The <code>ShaderTexture</code> class extends <code>TransformTexture</code> to render textures using custom shaders. It supports dynamic shader updates, setting uniform values, and binding textures for advanced visual effects. The class provides methods for creating shader-based textures from resource locations or raw shader code, along with caching and disposal mechanisms. </p> <p>IMPORTANT!!!</p> <p>If you are using raw shader, DO NOT forget to release the texture after using.</p>"},{"location":"ldlib/ui/textures/shader/#basic-properties","title":"Basic Properties","text":"Field Description location The resource location of the shader resolution The shader resolution factor (affects the iResolution uniform) color Color overlay applied to the shader texture"},{"location":"ldlib/ui/textures/shader/#apis","title":"APIs","text":""},{"location":"ldlib/ui/textures/shader/#dispose","title":"dispose","text":"<p>Dispose shader.</p> Java / KubeJS <pre><code>shaderTexture.dispose();\n</code></pre>"},{"location":"ldlib/ui/textures/shader/#updateshader","title":"updateShader","text":"<p>Updates the shader using a new resource location.</p> Java / KubeJS <pre><code>shaderTexture.updateShader(new ResourceLocation(\"modid:shader\"));\n</code></pre>"},{"location":"ldlib/ui/textures/shader/#updaterawshader","title":"updateRawShader","text":"<p>Updates the shader using raw shader code.</p> Java / KubeJS <pre><code>shaderTexture.updateRawShader(\"raw shader code\");\n</code></pre>"},{"location":"ldlib/ui/textures/shader/#setuniformcache","title":"setUniformCache","text":"<p>Sets a uniform cache consumer to update additional shader uniforms.</p> Java / KubeJS <pre><code>shaderTexture.setUniformCache(cache -&gt; {\n    // Update additional uniforms as needed\n});\n</code></pre>"},{"location":"ldlib/ui/textures/shader/#setresolution","title":"setResolution","text":"<p>Sets the resolution factor used in the shader.</p> Java / KubeJS <pre><code>shaderTexture.setResolution(2.5f);\n</code></pre>"},{"location":"ldlib/ui/textures/text/","title":"TextTexture","text":"<p>The <code>TextTexture</code> class extends <code>TransformTexture</code> to render text as a texture. It supports dynamic text updates through a supplier, configurable text styling (color, background color, drop shadow), and various text alignment or animation types (e.g. roll, hide). This class is primarily used to display formatted and localized text within GUI components.</p>"},{"location":"ldlib/ui/textures/text/#basic-properties","title":"Basic Properties","text":"Field Description text The formatted text to display color The text color (modifiable via setter) backgroundColor The background color behind the text width The maximum width for wrapping the text rollSpeed The speed at which text rolls (for animated text types) dropShadow Whether a drop shadow is applied to the text type The text display type (e.g., NORMAL, ROLL, HIDE, LEFT, RIGHT) supplier A supplier for dynamic text updates"},{"location":"ldlib/ui/textures/text/#apis","title":"APIs","text":""},{"location":"ldlib/ui/textures/text/#setsupplier","title":"setSupplier","text":"<p>Sets a supplier to provide dynamic text updates.</p> JavaKubeJS <pre><code>textTexture.setSupplier(() -&gt; \"Updated dynamic text\");\n</code></pre> <pre><code>textTexture.setSupplier(() =&gt; \"Updated dynamic text\");\n</code></pre>"},{"location":"ldlib/ui/textures/text/#updatetext","title":"updateText","text":"<p>Updates the displayed text. This method is invoked automatically via the supplier or can be called directly.</p> Java / KubeJS <pre><code>textTexture.updateText(\"New Text Content\");\n</code></pre>"},{"location":"ldlib/ui/textures/text/#setbackgroundcolor","title":"setBackgroundColor","text":"<p>Sets the background color behind the text.</p> Java / KubeJS <pre><code>textTexture.setBackgroundColor(0xffff0000);\n</code></pre>"},{"location":"ldlib/ui/textures/text/#setdropshadow","title":"setDropShadow","text":"<p>Enables or disables the drop shadow effect on the text.</p> Java / KubeJS <pre><code>textTexture.setDropShadow(true);\n</code></pre>"},{"location":"ldlib/ui/textures/text/#setwidth","title":"setWidth","text":"<p>Sets the maximum width for the text area. This method also recalculates text wrapping based on the new width.</p> Java / KubeJS <pre><code>textTexture.setWidth(100);\n</code></pre>"},{"location":"ldlib/ui/textures/text/#settype","title":"setType","text":"<p>Sets the text display type (e.g., NORMAL, ROLL, LEFT_HIDE).</p> <p>TextType</p> <ul> <li><code>NORMAL</code>:  center, add new lines below</li> <li><code>HIDE</code>:  center, hide redundant words</li> <li><code>ROLL</code>:  center, hide redundant words, roll words while hover</li> <li><code>ROLL_ALWAYS</code>:  center always roll words while redundant</li> <li><code>LEFT</code>:  same as NOMAL but left align</li> <li><code>RIGHT</code>:  same as NORMAL but right aligh</li> <li><code>LEFT_HIDE</code>:  same as HIDE but left align</li> <li><code>LEFT_ROLL</code>:  same as ROLL but left align</li> <li><code>LEFT_ROLL_ALWAYS</code>:  same as ROLL_ALWAYS but let align</li> </ul> Java / KubeJS <pre><code>textTexture.setType(TextType.ROLL);\n</code></pre>"},{"location":"ldlib/ui/ui_editor/","title":"Get Start","text":"<p>The UI Editor is a powerful built-in visual editor provided by ldlib. You can use it to easily design your UI, use it in your own mods, or use it through Java / KubeJS.</p>"},{"location":"ldlib/ui/ui_editor/#1-get-start","title":"1. Get Start","text":""},{"location":"ldlib/ui/ui_editor/#how-to-open-the-ui-editor","title":"How to open the UI Editor","text":"<p>In general, you can open it by command<code>/ldlib ui_editor</code>, which will use <code>./minecraft/ldlib/..</code> as its workspace.</p> <p></p>"},{"location":"ldlib/ui/ui_editor/#main-screen","title":"Main Screen","text":"<ol> <li>Menu: New/Save/Open UI projects. You can also import/export <code>Resources</code> here.</li> <li>Configurator: Basically all the setup happens here.</li> <li>Resources: available resources, e.g. <code>color</code>, <code>texture</code>, <code>lang entries</code>.</li> </ol>"},{"location":"ldlib/ui/ui_editor/#create-a-new-project","title":"Create a new project","text":"<p>When you first use it, click it to create an empty UI project. (If you are making UI for MBD, select the MBD project)</p> <p></p> <p>No surprise, you'll see the follow case.</p> <p></p> <ol> <li>ToolBox: Contains all the available UI widgets(components).</li> <li>Root Widget: The whole project has one and only one root widget, which is created by the system and you cannot delete it.</li> </ol>"},{"location":"ldlib/ui/ui_editor/#2-basic","title":"2. Basic","text":"<ol> <li>red frame are selected widgets.</li> <li>blue frame is the widget that mouse is hovering over it.</li> </ol>"},{"location":"ldlib/ui/ui_editor/#multi-select","title":"Multi-Select","text":"<p>Press <code>ctrl</code> to multi-select / cancle-select widget.</p>"},{"location":"ldlib/ui/ui_editor/#drag-selected-widgets","title":"Drag Selected Widgets","text":"<ol> <li>Hold down <code>alt</code> + <code>left-clicked</code>, if you see the arrows (all directions) then you can drag it.</li> <li>Anyway, you could also modify position by a configurator.</li> </ol>"},{"location":"ldlib/ui/ui_editor/#scale-selected-widgets","title":"Scale Selected Widgets","text":"<ol> <li>Hold down <code>alt</code> + <code>right-clicked</code>, if you see the arrows (right bottom) then you can scale it.</li> <li>Anyway, you could also modify size by a configurator.</li> </ol>"},{"location":"ldlib/ui/ui_editor/#add-a-widget","title":"Add a Widget","text":"<p>All widgets (except the Root) need to be added to a <code>father (parent)</code> widget that accepts it, and we call such <code>father (parent)</code> widget as <code>Group Type</code> widget (e.g. <code>Group</code>, <code>Tab Group</code>, <code>Scrollable Group</code>).</p> <p></p> <ol> <li>You can find all available widgets in the toolbox.</li> <li>Drag a widget into a <code>Group Type</code> widget. </li> <li>Rendering a green frame if such widget can accept it.</li> </ol>"},{"location":"ldlib/ui/ui_editor/#move-widget-from-one-groug-to-another-group","title":"Move widget from one Groug to another Group","text":"<p>Sometimes you may want to modify the parent control. </p> <ol> <li>You can do this by the menu (right-clicking page) and cut/copy to the selected parent widget. </li> <li>A better way is to press the <code>shift</code>and move it into the new Group.</li> </ol> <p> Rendering a green frame if such widget can accept it.</p>"},{"location":"ldlib/ui/ui_editor/#adjust-children-widgets-order","title":"Adjust Children Widgets Order","text":"<p>In general, all the <code>Group</code> widgets have a <code>children</code> tab in its configurator, showing all children, you can adjust their order by dragging.</p> <p></p>"},{"location":"ldlib/ui/ui_editor/#menu","title":"Menu","text":"<p>Right-click the page to open the menu.</p> <p></p> <ol> <li>All operations will be performed on selected widgets.</li> <li>Basic operations</li> <li>Align: availabe when you select multi widgets.</li> </ol>"},{"location":"ldlib/ui/ui_editor/group_widget/","title":"Group Widget","text":"<p><code>Group</code> refers to widgets to which can accept child widgets</p> <p>There are three built-in widgets so far: <code>Group</code>, <code>Scrollable Group</code>, and <code>Tab Group</code>.</p>"},{"location":"ldlib/ui/ui_editor/group_widget/#group","title":"Group","text":"<p><code>Group</code> is the most common widget, <code>Transform</code> will be applied to its children, and deletion and copy of the group are also applied to its children.</p> <p>You can drag child's preview to adjust their order</p> <p> </p>"},{"location":"ldlib/ui/ui_editor/group_widget/#scrollable-group","title":"Scrollable Group","text":"<p>Children in a <code>Scrollable Group</code> are hidden when they exceed the its size and allow users to scroll or drag groups to adjust the view.</p> <p></p> <p>The configurator has a lot of settings such as scroll bar styles, whether you can drag, etc. You can try them out yourself.</p>"},{"location":"ldlib/ui/ui_editor/group_widget/#tab-group","title":"Tab Group","text":"<p>As the name implies, <code>Tab group</code> allows you to set multiple tabs, which you can switch between different group views.</p> <p></p>"},{"location":"ldlib/ui/ui_editor/resource/","title":"Resources","text":"<p>The <code>UI Project</code> contains three built-in resources: <code>textures</code>, <code>colors</code> and <code>lang entries</code>. Resources are owned by projects and cannot be shared between projects.</p> <p>If you want the current project's resources to be available in other projects, you can <code>export</code> the resources first and then open other projects to <code>import</code> it.</p> <p></p>"},{"location":"ldlib/ui/ui_editor/resource/#textrures","title":"Textrures","text":"<ol> <li>Stored textures.</li> <li>Add new textures, glad we support many types of textures so far :).</li> <li>It's worth noting that <code>empty</code> is a built-in texture and you can't delete it.</li> </ol>"},{"location":"ldlib/ui/ui_editor/resource/#use-it","title":"Use it","text":"<p>When you open the configuration of a widget, you find that some where can accept the texture (e.g. background of Basic Info), and you can drag the texture in.</p> <p></p> <ol> <li>Drag texture.</li> <li>Rendering a green frame if it can accept this texture.</li> </ol> <p>NOTE: When you drag it to a widget, it replaces its background image by default.</p> <p></p>"},{"location":"ldlib/ui/ui_editor/resource/#edit-texture","title":"Edit Texture","text":"<p>Right-click to open the menu and edit the selected texture.</p> <p> 1. Open its configurator. 2. Modify the texture type. In general you'd better not modify it, because switching type will not modify references of previous one. 3. Some textures provide a preview of the settings, and you can open the file selector by clicking on it. 4. You can scale, translate, and rotate the texture by setting its Transform.</p> <p>NOTE: You can use <code>GroupTexture</code> with transform to create a more complex texture.</p> <p> 1. Combine multi textures. 2. Add a new layer.</p> <p>NOTE: You can create an animation texture by setting the starting and ending of frames, and the interval time.</p> <p></p>"},{"location":"ldlib/ui/ui_editor/resource/#colors","title":"Colors","text":""},{"location":"ldlib/ui/ui_editor/resource/#use-it_1","title":"Use it","text":"<p>When you open a configuration, you find that some where can accept the number (e.g. color of the label widget), and you can drag the color in.</p> <p></p> <ol> <li>Drag color.</li> <li>Rendering a green frame if it can accept this color.</li> </ol> <p>NOTE: When you drag it to a widget, it replaces its background to a Color Texture by default.</p> <p></p>"},{"location":"ldlib/ui/ui_editor/resource/#edit-color","title":"Edit Color","text":"<p>Right-click to open the menu and edit the selected color.</p> <p></p> <ol> <li>Pickup color (HSB mode), you can right click the pallete to swith mode.</li> <li>Preview.</li> <li>Modify by argb.</li> </ol>"},{"location":"ldlib/ui/ui_editor/resource/#entries","title":"Entries","text":"<p>Enties stores key-value, which can be regard as a lang file.</p> <p>When you open a configuration, you find that some where can accept the number (e.g. color of the label widget), and you can drag the color in. You can fill in your localization data, and then export to the lang file directly (W.I.P)</p>"},{"location":"ldlib/ui/ui_editor/resource/#use-it_2","title":"Use it","text":"<ol> <li>Drag entries.</li> <li>Rendering a green frame if it can accept a string.</li> </ol> <p>NOTE: When you drag it to a widget, it replaces its hover tooltips by default.</p> <p></p>"},{"location":"ldlib/ui/ui_editor/resource/#edit-entries","title":"Edit Entries","text":"<p>Right-click to open the menu and edit its vaule.</p> <p></p> <ol> <li>Typing your text here.</li> </ol> <p>You can right-click to open the menu and rename its key.</p>"},{"location":"ldlib/ui/widget/","title":"Preliminary","text":"<p>LDLib provides a wide range of widgets. You can review their functionalities and APIs on their respective pages. In this section, we introduce the fundamental concepts that underlie all widgets, ensuring you have a solid understanding of their common principles.</p> <p>All widgets inherit from the Widget class. As a result, they all share a set of universal APIs.</p>"},{"location":"ldlib/ui/widget/#basic-properties","title":"Basic properties","text":"<p>All properties can be accessed via Java / KubeJS.</p> JavaKubeJS <pre><code>var id = widget.getId();\nvar pos = widget.getPosition();\nwidget.setSize(10, 32);\nwidget.setSlefPosition(10, 10);\n</code></pre> <pre><code>let id = widget.getId();\nlet pos = widget.position // getPosition() is also fine.\nwidget.setSize(10, 32);\nwidget.setSlefPosition(10, 10);\n</code></pre> Field Description <code>id</code> Widget id, it doesn't have to be unique\uff0cand can be empty. <code>selftPosition</code> Self position represents the relative local position in the parent widget <code>parentPosition</code> Parent widget's global position. <code>position</code> Global position in the window, which is computed by the self position and parent position. <code>size</code> Widget size, this property affect the rect collid dection, e.g. hover, click, etc. <code>isVisible</code> Whether the widget is visible, only affect rendering, logic is still working. <code>isActive</code> Whether the widget logic is working. <code>align</code> align position refer to the parent. <code>backgroundTexture</code> background texture. <code>hoverTexture</code> darw texture while mouse hover. <code>overlay</code> overlay texture above the background texture. <code>parent</code> parent widget. <code>align</code> align position refer to the parent. <p>about position</p> <p><code>Position</code> is an important concept. Check the image below: </p>"},{"location":"ldlib/ui/widget/#apis","title":"APIs","text":""},{"location":"ldlib/ui/widget/#sethovertooltips","title":"<code>setHoverTooltips()</code>","text":"<p>Used to define the tooltips while the mouse hovered. It support both <code>string</code> and <code>component</code> as input.</p>      Your browser does not support video.    Java / KubeJS <pre><code>widget.setHoverTooltips(\"this is a button\");\n// widget.setHoverTooltips(\"line 1\", \"line2\");\n</code></pre> <p>Info</p> <p>LDLib provides massive different types of textures, choose what you want:). See <code>GUI Textures</code> to check supported textures.</p>"},{"location":"ldlib/ui/widget/#setbackground","title":"<code>setBackground()</code>","text":"<p>Used to set the background texture of the widget. </p>"},{"location":"ldlib/ui/widget/#sethovertexture","title":"<code>setHoverTexture()</code>","text":"<p>Used to set the hover texture of the widget.</p> Java / KubeJS <pre><code>widget.setBackground(new ResourceTexture(\"ldlib:textures/gui/icon.png\"));\n</code></pre>"},{"location":"ldlib/ui/widget/#ismouseoverelement","title":"<code>isMouseOverElement()</code>","text":"<p>TO check whether the mouse over the widget.</p> Java / KubeJS <pre><code>widget.isMouseOverElement(mouseX, mouseY);\n</code></pre>"},{"location":"ldlib/ui/widget/Button/","title":"ButtonWidget","text":"<p>The ButtonWidget is a UI widget representing a clickable button in the GUI system</p>"},{"location":"ldlib/ui/widget/Button/#basic-properties","title":"Basic properties","text":"<p>All properties can be accessed via Java / KubeJS.</p> Field Description <code>isClicked</code> is the button clicked currently"},{"location":"ldlib/ui/widget/Button/#apis","title":"APIs","text":""},{"location":"ldlib/ui/widget/Button/#setbuttontexture","title":"<code>setButtonTexture()</code>","text":"<p>Equal to the <code>setBackground</code>.</p> Java / KubeJS <pre><code>button.setButtonTexture(ResourceBorderTexture.BUTTON_COMMON, new TextTexture(\"Button\"));\n</code></pre>"},{"location":"ldlib/ui/widget/Button/#setclickedtexture","title":"<code>setClickedTexture()</code>","text":"<p>Remove child widget from it.</p> Java / KubeJS <pre><code>button.setClickedTexture(ResourceBorderTexture.BUTTON_COMMON, new TextTexture(\"Clicked\"));\n</code></pre>"},{"location":"ldlib/ui/widget/Button/#setonpresscallback","title":"<code>setOnPressCallback()</code>","text":"<p>Used to bind functional logic.</p> <p><code>ClickData</code> provides mouse state information:</p> <ol> <li> <p><code>clickData.button</code>: mouse button id number.</p> button Description <code>0</code> left button <code>1</code> right button <code>2</code> middle button </li> <li> <p><code>clickData.isShiftClick</code>: is the shift key typed.</p> </li> <li><code>clickData.isCtrlClick</code>: is the ctrl key typed.</li> <li><code>clickData.isRemote</code>: is the remote enverionment.</li> </ol> JavaKubeJS <pre><code>button.setOnPressCallback(clickData -&gt; {\n    if (clickData.isRemote) { // can be used to check trigger side\n\n    }\n});\n</code></pre> <pre><code>button.setOnPressCallback(clickData =&gt; {\n    if (clickData.isRemote) { // can be used to check trigger side\n\n    }\n});\n</code></pre>"},{"location":"ldlib/ui/widget/Image/","title":"ImageWidget","text":"<p><code>ImageWidget</code> is used to display images, which provided by a <code>GUI Texture</code>.</p>"},{"location":"ldlib/ui/widget/Image/#basic-properties","title":"Basic Properties","text":"Field Description border The border width (range: -100 to 100) borderColor The color of the border"},{"location":"ldlib/ui/widget/Image/#apis","title":"APIs","text":""},{"location":"ldlib/ui/widget/Image/#setimage","title":"setImage","text":"<p>Sets the image texture using a texture instance.</p> Java / KubeJS <pre><code>imageWidget.setImage(new ResourceTexture(\"ldlib:textures/gui/icon.png\"));\n</code></pre>"},{"location":"ldlib/ui/widget/Image/#setimage_1","title":"setImage","text":"<p>Sets the image texture using a supplier.</p> JavaKubeJS <pre><code>imageWidget.setImage(() -&gt; new ResourceTexture(\"ldlib:textures/gui/icon.png\"));\n</code></pre> <pre><code>imageWidget.setImage(() =&gt; new ResourceTexture(\"ldlib:textures/gui/icon.png\"));\n</code></pre>"},{"location":"ldlib/ui/widget/Image/#getimage","title":"getImage","text":"<p>Returns the current image texture.</p> Java / KubeJS <pre><code>var texture = imageWidget.getImage();\n</code></pre>"},{"location":"ldlib/ui/widget/Image/#setborder","title":"setBorder","text":"<p>Sets the border width and color.</p> Java / KubeJS <pre><code>imageWidget.setBorder(2, 0xFFFFFFFF); // ARGB\n</code></pre>"},{"location":"ldlib/ui/widget/Label/","title":"LabelWidget","text":"<p><code>LabelWidget</code> is used to display text and component.</p> <p>Advanced Widget</p> <p><code>LabelWidget</code> is a light-weight widget to display text only. text height, align, ... are fixed. Therefore, we reconmend to use the <code>TextTextureWidget</code> instead, which provids advanced controll of text display.</p>"},{"location":"ldlib/ui/widget/Label/#basic-properties","title":"Basic Properties","text":"Field Description <code>color</code> The text color as an integer <code>dropShadow</code> Indicates whether the drop shadow effect is enabled <code>lastTextValue</code> currently text <code>read only</code>"},{"location":"ldlib/ui/widget/Label/#apis","title":"APIs","text":""},{"location":"ldlib/ui/widget/Label/#settext","title":"<code>setText()</code>","text":"<p>Updates the label text with a <code>string</code>.</p> Java / KubeJS <pre><code>label.setText(\"New Label Text\");\n</code></pre>"},{"location":"ldlib/ui/widget/Label/#setcomponent","title":"<code>setComponent()</code>","text":"<p>Same as <code>setText()</code> but support <code>component</code> as input</p>"},{"location":"ldlib/ui/widget/Label/#settextprovider","title":"<code>setTextProvider()</code>","text":"<p>Configures a supplier to dynamically provide the label text. It will obtain the latest text per tick.</p> JavaKubeJS <pre><code>label.setTextProvider(() -&gt; \"Dynamic Text\");\n</code></pre> <pre><code>label.setTextProvider(() =&gt; \"Dynamic Text\");\n</code></pre>"},{"location":"ldlib/ui/widget/Label/#setcolor","title":"<code>setColor()</code>","text":"<p>Sets the text color. If a rich text component is already set, its style will be replaced accordingly.</p> Java / KubeJS <pre><code>label.setColor(0xFFFFFFFF); // ARGB\n</code></pre>"},{"location":"ldlib/ui/widget/Label/#setdropshadow","title":"<code>setDropShadow()</code>","text":"<p>Enables or disables the drop shadow effect for the label.</p> Java / KubeJS <pre><code>label.setDropShadow(true);\n</code></pre>"},{"location":"ldlib/ui/widget/PlantomSlot/","title":"PhantomSlotWidget","text":"Your browser does not support video.    <p>The <code>PhantomSlotWidget</code> is a UI widget representing a \"phantom\" item slot, commonly used for ghost ingredient inputs in recipe configurations. Unlike regular slots, it does not interact with real inventories but allows setting, modifying, and clearing items for visual or configurational purposes.</p>"},{"location":"ldlib/ui/widget/PlantomSlot/#features","title":"Features","text":"<ul> <li>Does not allow item taking or putting from real inventories.</li> <li>Supports setting items via UI clicks or API calls.</li> <li>Allows right-click clearing (<code>clearSlotOnRightClick</code>).</li> <li>Supports integration with JEI/EMI for ghost ingredient handling.</li> </ul>"},{"location":"ldlib/ui/widget/PlantomSlot/#basic-properties","title":"Basic Properties","text":"Field Description <code>maxStackSize</code> Maximum allowed stack size in this phantom slot. <code>clearSlotOnRightClick</code> Whether right-clicking clears the slot."},{"location":"ldlib/ui/widget/PlantomSlot/#apis","title":"APIs","text":"<p>It owns all APIs from <code>SlotWidget</code>, and you can get or set item by its APIs.</p>"},{"location":"ldlib/ui/widget/PlantomSlot/#setclearslotonrightclick","title":"setClearSlotOnRightClick","text":"<p>Configures whether right-clicking on the slot clears its contents.</p> Java / KubeJS <pre><code>phantomSlot.setClearSlotOnRightClick(true);\n</code></pre>"},{"location":"ldlib/ui/widget/PlantomSlot/#setmaxstacksize","title":"setMaxStackSize","text":"<p>Sets the maximum allowed stack size in the phantom slot.</p> Java / KubeJS <pre><code>phantomSlot.setMaxStackSize(64);\n</code></pre>"},{"location":"ldlib/ui/widget/PlantomSlot/#mouse-interactions","title":"Mouse Interactions","text":"<p>Phantom slots handle different types of mouse interactions:</p> Mouse Action Effect Left-click on empty slot with an item Sets the item to the slot Left-click on filled slot with an item Replaces the item in the slot Right-click on filled slot Decreases stack size Shift + Click Adjusts stack size dynamically Right-click on empty slot Clears the slot (if <code>clearSlotOnRightClick</code> is enabled)"},{"location":"ldlib/ui/widget/PlantomTank/","title":"PhantomTankWidget","text":"Your browser does not support video.    <p>The <code>PhantomTankWidget</code> is a ghost fluid slot that allows setting fluid content without actual transfer mechanics. It's useful for defining recipe inputs or fluid placeholders.</p>"},{"location":"ldlib/ui/widget/PlantomTank/#features","title":"Features","text":"<ul> <li>Phantom fluid storage \u2013 Doesn't actually consume or provide fluids.</li> <li>Supports drag-and-drop \u2013 Accepts fluid items from JEI, EMI, or REI.</li> <li>Custom event handling \u2013 Updates an external state when fluid changes.</li> </ul>"},{"location":"ldlib/ui/widget/PlantomTank/#apis","title":"APIs","text":"<p>It owns all APIs from <code>TankWidget</code>, and you can get or set item by its APIs.</p>"},{"location":"ldlib/ui/widget/PlantomTank/#setifluidstackupdater","title":"setIFluidStackUpdater","text":"<p>Registers a callback to track fluid changes.</p> JavaKubeJS <pre><code>phantomTank.setIFluidStackUpdater(fluid -&gt; {\n    System.out.println(\"New phantom fluid: \" + fluid);\n});\n</code></pre> <pre><code>phantomTank.setIFluidStackUpdater(fluid =&gt; {\n    console.log(\"New phantom fluid: \" + fluid);\n});\n</code></pre>"},{"location":"ldlib/ui/widget/Selector/","title":"SelectorWidget","text":"Your browser does not support video.    <p>The <code>SelectorWidget</code> is a dropdown-style selection widget that allows users to pick an option from a predefined list. It supports dynamically updating the selection list, displaying a configurable UI, and handling selection changes efficiently.</p>"},{"location":"ldlib/ui/widget/Selector/#features","title":"Features","text":"<ul> <li>Dropdown selection \u2013 Expands to show available choices.</li> <li>Event handling \u2013 Fires callbacks when the selection changes.</li> </ul>"},{"location":"ldlib/ui/widget/Selector/#properties","title":"Properties","text":"Field Type Description <code>currentValue</code> <code>String</code> Currently selected option."},{"location":"ldlib/ui/widget/Selector/#apis","title":"APIs","text":""},{"location":"ldlib/ui/widget/Selector/#setcandidates","title":"setCandidates","text":"<p>Updates the list of selectable options.</p> JavaKubeJS <pre><code>selectorWidget.setCandidates(List.of(\"OptionA\", \"OptionB\", \"OptionC\"));\n</code></pre> <pre><code>selectorWidget.setCandidates([\"OptionA\", \"OptionB\", \"OptionC\"]);\n</code></pre> <ul> <li>Triggers a UI update to reflect the new options.</li> </ul>"},{"location":"ldlib/ui/widget/Selector/#setvalue","title":"setValue","text":"<p>Sets the currently selected value.</p> Java / KubeJS <pre><code>selectorWidget.setValue(\"OptionA\");\n</code></pre> <ul> <li>If the value is not found in <code>candidates</code>, it remains unchanged.</li> </ul>"},{"location":"ldlib/ui/widget/Selector/#setmaxcount","title":"setMaxCount","text":"<p>Defines how many options should be visible before scrolling.</p> Java / KubeJS <pre><code>selectorWidget.setMaxCount(3);\n</code></pre> <ul> <li>If there are more than <code>maxCount</code> options, a scrollbar is added.</li> </ul>"},{"location":"ldlib/ui/widget/Selector/#setfontcolor","title":"setFontColor","text":"<p>Changes the color of option text.</p> Java / KubeJS <pre><code>selectorWidget.setFontColor(0xFFFFFF); // White text\n</code></pre>"},{"location":"ldlib/ui/widget/Selector/#setbuttonbackground","title":"setButtonBackground","text":"<p>Sets the background texture for the button area.</p> Java / KubeJS <pre><code>selectorWidget.setButtonBackground(myCustomTexture);\n</code></pre>"},{"location":"ldlib/ui/widget/Selector/#setonchanged","title":"setOnChanged","text":"<p>Registers a callback to handle selection changes.</p> JavaKubeJS <pre><code>selectorWidget.setOnChanged(selected -&gt; {\n    System.out.println(\"New selection: \" + selected);\n});\n</code></pre> <pre><code>selectorWidget.setOnChanged(selected =&gt; {\n    console.log(\"New selection: \" + selected);\n});\n</code></pre> <ul> <li>This is useful for updating UI state or triggering game logic.</li> </ul>"},{"location":"ldlib/ui/widget/Selector/#setcandidatessupplier","title":"setCandidatesSupplier","text":"<p>Automatically updates the option list from a dynamic source.</p> JavaKubeJS <pre><code>selectorWidget.setCandidatesSupplier(() -&gt; fetchDynamicOptions());\n</code></pre> <pre><code>selectorWidget.setCandidatesSupplier(() =&gt; fetchDynamicOptions());\n</code></pre> <ul> <li>The widget polls this function to refresh the list.</li> <li>Useful when candidates change based on external conditions.</li> </ul>"},{"location":"ldlib/ui/widget/Selector/#setshow","title":"setShow","text":"<p>Manually toggles the dropdown visibility.</p> Java / KubeJS <pre><code>selectorWidget.setShow(true); // Opens dropdown\n</code></pre>"},{"location":"ldlib/ui/widget/Slot/","title":"SlotWidget","text":"<p>The <code>SlotWidget</code> represents an interactive item slot within a container GUI. This widget supports configurable properties such as whether items can be taken or placed, customizable hover overlays and tooltips, and integration with JEI/REI/EMI systems for displaying ingredient details. It can be configured to represent a slot in either a standard inventory container or via an item transfer handler.</p> <p>Note</p> <p>You cannot modify slot widget size.</p>"},{"location":"ldlib/ui/widget/Slot/#basic-properties","title":"Basic Properties","text":"Field Description canTakeItems Indicates if items can be extracted from the slot (modifiable via setter) canPutItems Indicates if items can be inserted into the slot (modifiable via setter) drawHoverOverlay Determines whether a hover overlay is drawn when the mouse is over the slot drawHoverTips Determines whether tooltips are shown when the mouse hovers over the slot lastItem Item stored in the last tick."},{"location":"ldlib/ui/widget/Slot/#apis","title":"APIs","text":""},{"location":"ldlib/ui/widget/Slot/#setcontainerslot","title":"setContainerSlot","text":"<p>Associates the widget with an inventory container by specifying the slot index. e.g. player inventory.</p> Java / KubeJS <pre><code>var player = ...;\nslotWidget.setContainerSlot(player.getInventory(), 2); // bind the player inventory of 2 index.\n</code></pre>"},{"location":"ldlib/ui/widget/Slot/#sethandlerslot","title":"setHandlerSlot","text":"<p>Configures the widget to use an item transfer handler with the specified slot index. </p>"},{"location":"ldlib/ui/widget/Slot/#java","title":"Java","text":"<p>For Java User !!!</p> <p>If you want to use the handler of <code>ItemStackHandler</code>(from forge) or <code>Storage&lt;ItemVariant&gt;</code>(from fabric), you need one more line. Because Forge and Fabric has different APIs, you need to convert the handler into the LDLib one, which can be found in <code>ItemTransferHelperImpl</code>.</p> ForgeFabric <pre><code>var itemHandler = ...;\nvar itemTransfer = ItemTransferHelperImpl.toItemTransfer(itemHandler);\n</code></pre> <pre><code>var storage = ...;\nvar itemTransfer = ItemTransferHelperImpl.toItemTransfer(storage);\n</code></pre>"},{"location":"ldlib/ui/widget/Slot/#kubejs","title":"KubeJS","text":"<p>KubeJS user do not need to do such mess. We have already convert them into a item transfer internal already.</p> KubeJS <pre><code>slotWidget.setHandlerSlot(itemTransfer, 0);\n</code></pre>"},{"location":"ldlib/ui/widget/Slot/#setitem","title":"setItem","text":"<p>Set the internal itemstack with/without notify.</p> Java / KubeJS <pre><code>slotWidget.setItem(itemstack); // it will also trigger the listen you set\nslotWidget.setItem(itemstack, false); // it wont trigger the listen\n</code></pre>"},{"location":"ldlib/ui/widget/Slot/#getitem","title":"getItem","text":"<p>Get the internal itemstack stored.</p> Java / KubeJS <pre><code>var itemstack = slotWidget.getItem();\n</code></pre>"},{"location":"ldlib/ui/widget/Slot/#setchangelistener","title":"setChangeListener","text":"<p>Configures additional slot location information, such as whether it belongs to the player container or hotbar. It will affect the shift move behaviour.</p> JavaKubeJS <pre><code>slotWidget.setChangeListener(() -&gt; {\n    var last = slotWidget.getLastItem();\n    var current = slotWidget.getItem();\n});\n</code></pre> <pre><code>slotWidget.setChangeListener(() =&gt; {\n    let last = slotWidget.getLastItem();\n    let current = slotWidget.getItem();\n});\n</code></pre>"},{"location":"ldlib/ui/widget/Slot/#canputstack","title":"canPutStack","text":"<p>Whether can put stack into the slot.</p> Java / KubeJS <pre><code>slotWidget.canPutStack(true);\n</code></pre>"},{"location":"ldlib/ui/widget/Slot/#cantakestack","title":"canTakeStack","text":"<p>Whether can take stack from the slot.</p> Java / KubeJS <pre><code>slotWidget.canTakeStack(true);\n</code></pre>"},{"location":"ldlib/ui/widget/Slot/#setlocationinfo","title":"setLocationInfo","text":"<p>Configures additional slot location information, such as whether it belongs to the player container or hotbar. It will affect the shift move behaviour.</p> Java / KubeJS <pre><code>slotWidget.setLocationInfo(true, false); // (isPlayerContainer isPlayerHotBar)\n</code></pre>"},{"location":"ldlib/ui/widget/Switch/","title":"SwitchWidget","text":"<p>The <code>SwitchWidget</code> is a toggle button that switches between an ON and OFF state. It supports custom textures, event callbacks, and dynamic state updates.</p>"},{"location":"ldlib/ui/widget/Switch/#features","title":"Features","text":"<ul> <li>Toggle button behavior \u2013 Click to switch between ON and OFF.</li> <li>Event handling \u2013 Fires callbacks when the switch state changes.</li> </ul>"},{"location":"ldlib/ui/widget/Switch/#properties","title":"Properties","text":"Field Type Description <code>isPressed</code> <code>boolean</code> (default: false) Current switch state."},{"location":"ldlib/ui/widget/Switch/#apis","title":"APIs","text":""},{"location":"ldlib/ui/widget/Switch/#setpressed","title":"setPressed","text":"<p>Sets the ON/OFF state of the switch.</p> Java / KubeJS <pre><code>switchWidget.setPressed(true); // Turns ON\n</code></pre> <ul> <li>Triggers UI updates and event callbacks.</li> </ul>"},{"location":"ldlib/ui/widget/Switch/#setonpresscallback","title":"setOnPressCallback","text":"<p>Registers a callback when the switch is clicked.</p> JavaKubeJS <pre><code>switchWidget.setOnPressCallback((clickData, state) -&gt; {\n    System.out.println(\"Switch is now: \" + state);\n});\n</code></pre> <pre><code>switchWidget.setOnPressCallback((clickData, state) =&gt; {\n    console.log(\"Switch is now: \" + state);\n});\n</code></pre>"},{"location":"ldlib/ui/widget/Switch/#setsupplier","title":"setSupplier","text":"<p>Automatically syncs with an external state.</p> JavaKubeJS <pre><code>switchWidget.setSupplier(() -&gt; getCurrentState()); // bool\n</code></pre> <pre><code>switchWidget.setSupplier(() =&gt; getCurrentState()); // bool\n</code></pre> <ul> <li>Updates dynamically when <code>getCurrentState()</code> changes.</li> </ul>"},{"location":"ldlib/ui/widget/Tank/","title":"TankWidget","text":"<p>The <code>TankWidget</code> represents a fluid slot widget within a container GUI. It displays a fluid in a designated tank and supports fluid interactions such as filling and emptying. In addition, it integrates with external systems (JEI/REI/EMI) to show fluid ingredient details and provides configurable options for hover overlays, tooltips, and click behavior.</p>"},{"location":"ldlib/ui/widget/Tank/#basic-properties","title":"Basic Properties","text":"Field Description fluidTank The fluid storage or transfer handler associated with this widget tank The index of the fluid tank being represented showAmount Determines whether the fluid amount is displayed allowClickFilled Controls whether clicking the slot when filled triggers container-filling behavior allowClickDrained Controls whether clicking the slot when empty triggers container-emptying behavior drawHoverOverlay Indicates if a hover overlay should be drawn when the mouse is over the widget drawHoverTips Indicates if hover tooltips should be displayed fillDirection The direction in which the fluid fill is rendered (e.g. DOWN_TO_UP) lastFluidInTank Last fluid stored in the tank lastTankCapacity Last tank capacity"},{"location":"ldlib/ui/widget/Tank/#apis","title":"APIs","text":""},{"location":"ldlib/ui/widget/Tank/#setfluidtank-ifluidstorage","title":"setFluidTank (IFluidStorage)","text":"<p>Associates the widget with a fluid storage and sets the tank index to 0.</p> Java / KubeJS <pre><code>tankWidget.setFluidTank(fluidStorage);\n</code></pre>"},{"location":"ldlib/ui/widget/Tank/#setfluidtank-ifluidtransfer-int","title":"setFluidTank (IFluidTransfer, int)","text":"<p>Associates the widget with a fluid transfer handler and specifies the tank index.</p> Java / KubeJS <pre><code>tankWidget.setFluidTank(fluidTransfer, 1);\n</code></pre>"},{"location":"ldlib/ui/widget/Tank/#setfluid","title":"setFluid","text":"<p>Set the internal fluidstack with/without notify.</p> Java / KubeJS <pre><code>tankWidget.setFluid(fluidstack); // it will also trigger the listen you set\ntankWidget.setFluid(fluidstack, false); // it wont trigger the listen\n</code></pre>"},{"location":"ldlib/ui/widget/Tank/#getfluid","title":"getFluid","text":"<p>Get the internal fluidstack stored.</p> Java / KubeJS <pre><code>var fluidstack = tankWidget.getFluid();\n</code></pre>"},{"location":"ldlib/ui/widget/Tank/#setchangelistener","title":"setChangeListener","text":"<p>Configures additional slot location information, such as whether it belongs to the player container or hotbar. It will affect the shift move behaviour.</p> JavaKubeJS <pre><code>tankWidget.setChangeListener(() -&gt; {\n    var last = tankWidget.getLastFluidInTank();\n    var current = tankWidget.getFluid();\n});\n</code></pre> <pre><code>slotWidget.setChangeListener(() =&gt; {\n    let last = tankWidget.getLastFluidInTank();\n    let current = tankWidget.getFluid();\n});\n</code></pre>"},{"location":"ldlib/ui/widget/TextField/","title":"TextFieldWidget","text":"Your browser does not support video.    <p>The <code>TextFieldWidget</code> provides an editable text field for GUI interfaces. It supports dynamic text updates via a supplier and responder, validation through custom validators, and configurable properties such as maximum string length, border style, and text color.</p>"},{"location":"ldlib/ui/widget/TextField/#basic-properties","title":"Basic Properties","text":"Field Description currentString The current text displayed by the text field maxStringLength Maximum allowed length for the text isBordered Determines whether the text field has a border textColor The color of the text (modifiable via setter) supplier A supplier for dynamic text updates textResponder A responder that handles text changes wheelDur Duration (or step value) used for mouse wheel adjustments"},{"location":"ldlib/ui/widget/TextField/#apis","title":"APIs","text":""},{"location":"ldlib/ui/widget/TextField/#settextsupplier","title":"setTextSupplier","text":"<p>Sets the supplier used to update the text dynamically.</p> Java / KubeJS <pre><code>textFieldWidget.setTextSupplier(() -&gt; \"Dynamic Text\");\n</code></pre>"},{"location":"ldlib/ui/widget/TextField/#settextresponder","title":"setTextResponder","text":"<p>Sets the responder to be called when the text changes.</p> Java / KubeJS <pre><code>textFieldWidget.setTextResponder(newText -&gt; {\n    // Handle text change\n});\n</code></pre>"},{"location":"ldlib/ui/widget/TextField/#setbordered","title":"setBordered","text":"<p>Configures whether the text field should display a border.</p> Java / KubeJS <pre><code>textFieldWidget.setBordered(true);\n</code></pre>"},{"location":"ldlib/ui/widget/TextField/#settextcolor","title":"setTextColor","text":"<p>Sets the text color for the text field.</p> Java / KubeJS <pre><code>textFieldWidget.setTextColor(0xffffff);\n</code></pre>"},{"location":"ldlib/ui/widget/TextField/#setmaxstringlength","title":"setMaxStringLength","text":"<p>Sets the maximum number of characters allowed in the text field.</p> Java / KubeJS <pre><code>textFieldWidget.setMaxStringLength(100);\n</code></pre>"},{"location":"ldlib/ui/widget/TextField/#setvalidator","title":"setValidator","text":"<p>Assigns a custom validator function to control and sanitize text input.</p> Java / KubeJS <pre><code>textFieldWidget.setValidator(text -&gt; text.trim());\n</code></pre>"},{"location":"ldlib/ui/widget/TextField/#setcompoundtagonly","title":"setCompoundTagOnly","text":"<p>Restricts input to valid compound tags. Displays a tooltip indicating the restriction.</p> Java / KubeJS <pre><code>textFieldWidget.setCompoundTagOnly();\n</code></pre>"},{"location":"ldlib/ui/widget/TextField/#setresourcelocationonly","title":"setResourceLocationOnly","text":"<p>Restricts input to valid resource locations. Displays a tooltip indicating the restriction.</p> Java / KubeJS <pre><code>textFieldWidget.setResourceLocationOnly();\n</code></pre>"},{"location":"ldlib/ui/widget/TextField/#setnumbersonly","title":"setNumbersOnly","text":"<p>Restricts input to numeric values. Overloads are available for different numeric types.</p> JavaKubeJS <pre><code>textFieldWidget.setNumbersOnly(0, 100); // int\ntextFieldWidget.setNumbersOnly(0.0f, 1.0f); // float\n</code></pre> <pre><code>textFieldWidget.setNumbersOnlyInt(0, 100); // int\ntextFieldWidget.setNumbersOnlyFloat(0, 100); // float\n</code></pre>"},{"location":"ldlib/ui/widget/TextField/#setwheeldur","title":"setWheelDur","text":"<p>Sets the wheel duration (step value) for adjusting numbers via mouse wheel or dragging.</p> Java / KubeJS <pre><code>textFieldWidget.setWheelDur(1);\n</code></pre>"},{"location":"ldlib/ui/widget/TextTexture/","title":"TextTextureWidget","text":"<p><code>TextTextureWidget</code> is an advanced text widget compared with <code>LabelWidget</code>. It wrapper an internal <code>TextTexture</code>, therefore, you can set the all text rendering properties by it.</p>"},{"location":"ldlib/ui/widget/TextTexture/#basic-properties","title":"Basic Properties","text":"Field Description lastComponent The last component text displayed  <code>read only</code> textTexture Internal <code>TextTexture</code> <code>read only</code>"},{"location":"ldlib/ui/widget/TextTexture/#apis","title":"APIs","text":""},{"location":"ldlib/ui/widget/TextTexture/#texturestyle","title":"textureStyle","text":"<p>Modifies the style of the internal text texture. see <code>TextTexture</code> for more details.</p> JavaKubeJS <pre><code>textTextureWidget.textureStyle(texture -&gt; {\n    texture.setType(TextType.ROLL);\n    texture.setRollSpeed(0.5);\n});\n</code></pre> <pre><code>textTextureWidget.textureStyle(texture =&gt; {\n    texture.setType(TextType.ROLL);\n    texture.setRollSpeed(0.5);\n});\n</code></pre>"},{"location":"ldlib/ui/widget/TextTexture/#settext","title":"<code>setText</code>","text":"<p>Sets the text using a string.</p> Java / KubeJS <pre><code>textTextureWidget.setText(\"Hello World\");\n</code></pre>"},{"location":"ldlib/ui/widget/TextTexture/#settext-setcomponent","title":"<code>setText</code> / <code>setComponent</code>","text":"<p>Sets the text using a Component.</p> JavaKubeJS <pre><code>textTextureWidget.setText(Component.literal(\"Hello World\"));\n</code></pre> <pre><code>textTextureWidget.setComponent(\"....\");\n</code></pre>"},{"location":"ldlib/ui/widget/TextTexture/#settext-settextprovider","title":"<code>setText / setTextProvider</code>","text":"<p>Sets the text using a Supplier.</p> JavaKubeJS <pre><code>textTextureWidget.setText(() -&gt; \"dynamic text\");\n</code></pre> <pre><code>textTextureWidget.setTextProvider(() =&gt; Component.string(\"dynamic text\"));\n</code></pre>"},{"location":"ldlib/ui/widget/WidgetGroup/","title":"WidgetGroup","text":"<p> <code>WidgetGroup</code></p> <p><code>WidgetGroup</code> is a container which can add child widgets. Widget inherints from <code>WidgetGroup</code> can add child widgets as well. </p> <p>Note</p> <p>We will add a  <code>WidgetGroup</code> for all widget inherints from it.</p>"},{"location":"ldlib/ui/widget/WidgetGroup/#basic-properties","title":"Basic properties","text":"<p>All properties can be accessed via Java / KubeJS.</p> Field Description <code>widgets</code> all child widgets <code>layout</code> layout of child widgets <code>layoutPadding</code> padding offset JavaKubeJS <pre><code>for (var child in group.widgets) {\n\n}\n</code></pre> <pre><code>for (let child of group.widgets) {\n\n}\n</code></pre> <p>Warning</p> <p>DO NOT add widget to the <code>group.widgets</code> directly!! please check below methods.</p>"},{"location":"ldlib/ui/widget/WidgetGroup/#apis","title":"APIs","text":""},{"location":"ldlib/ui/widget/WidgetGroup/#addwidgets","title":"<code>addWidgets()</code>","text":"<p>Add child widgets to it in order.</p> Java / KubeJS <pre><code>var button = ...;\nvar label = ...;\ngroup.addWidgets(button, label);\n</code></pre>"},{"location":"ldlib/ui/widget/WidgetGroup/#removewidget-clearallwidgets","title":"<code>removeWidget() / clearAllWidgets()</code>","text":"<p>Remove child widget from it.</p> Java / KubeJS <pre><code>var child = group.getFirstWidgetById(\"button_id\");\ngroup.removeWidget(child);\ngroup.clearAllWidget();\n</code></pre>"},{"location":"ldlib/ui/widget/WidgetGroup/#waittoadded-waittoremoved","title":"<code>waitToAdded() / waitToRemoved()</code>","text":"<p>Basically equals to the <code>addWidgets()</code> and <code>removeWidget()</code>. However, these two methods is useful for iteration and multi-thread. It handles widget in the next tick (in main thread).</p>"},{"location":"ldlib/ui/widget/progress/","title":"ProgressWidget","text":"Your browser does not support video.    <p>The <code>ProgressWidget</code> is a UI component that visually represents progress using a progress bar. It can be used in various contexts, such as tracking crafting progress, energy levels, or other dynamically changing values.</p>"},{"location":"ldlib/ui/widget/progress/#features","title":"Features","text":"<ul> <li>Customizable progress texture \u2013 Define how the progress bar looks.</li> <li>Dynamic progress updates \u2013 Uses a <code>DoubleSupplier</code> to fetch real-time progress.</li> </ul>"},{"location":"ldlib/ui/widget/progress/#properties","title":"Properties","text":"Field Type Description <code>lastProgressValue</code> <code>double</code> Stores the last recorded progress value."},{"location":"ldlib/ui/widget/progress/#apis","title":"APIs","text":""},{"location":"ldlib/ui/widget/progress/#setprogresssupplier","title":"setProgressSupplier","text":"<p>Sets a progress supplier from 0 to 1.</p> JavaKubeJS <pre><code>progressWidget.setProgressSupplier(() -&gt; 0.3);\n</code></pre> <pre><code>progressWidget.setProgressSupplier(() =&gt; 0.3);\n</code></pre>"},{"location":"ldlib/ui/widget/progress/#setdynamichovertips","title":"setDynamicHoverTips","text":"<p>Sets a dynamic hovertips based on the progress value.</p> JavaKubeJS <pre><code>progressWidget.setDynamicHoverTips(progress -&gt; \"current progress is %.f%\".format(progress * 100));\n</code></pre> <pre><code>progressWidget.setDynamicHoverTips(progress =&gt; `current progress is ${progress * 100}%` );\n</code></pre>"},{"location":"multiblocked2/","title":"Introduction","text":"<p>Multiblocked2 (mbd2) is the more powerful visual custom machine/multi-block structure mod after mbd1(multiblocked). Mbd2 is an extremely flexible yet vanilla-esque multiblock mod, that embraces aspects of MultiblockTweaker and Modular Machinery.</p> <p>Original project can be found here: Multiblocked</p> <p> Discord: https://discord.com/invite/sDdf2yD9bh</p> <p> Github:  https://github.com/Low-Drag-MC/Multiblocked2</p>"},{"location":"multiblocked2/#compatibility","title":"Compatibility","text":"<p>Built-in</p> <ul> <li>Item</li> <li>Item Durability</li> <li>Fluid</li> <li>Forge energy</li> <li>Entity</li> </ul> <p>GTCEU</p> <ul> <li>Energy</li> </ul> <p>Botania</p> <ul> <li>mana</li> </ul> <p>Mekanism</p> <ul> <li>Heat</li> <li>Gas</li> <li>Slurry</li> <li>Pigment</li> <li>Infusion</li> </ul> <p>Create</p> <ul> <li>Stress</li> <li>RPM</li> </ul> <p>PneumaticCraft</p> <ul> <li>pressure</li> <li>heat</li> </ul> <p>Embers</p> <ul> <li>ember</li> </ul> <p>Nature's aura</p> <ul> <li>aura</li> </ul>"},{"location":"multiblocked2/#whats-new","title":"What's new","text":""},{"location":"multiblocked2/#demo","title":"Demo","text":"<p>Demo: A fire pedestal burn coals to emi fire and light surroundings. Just imagine how amazing it is to create such a cool machine without writing a single line of code!</p>"},{"location":"multiblocked2/#new-editor","title":"New Editor","text":"<p>New editor: more powerful, more modern and easier to use. mbd2 helps you work without code, provides a unity-like game design engine, more efficient customization of your machine.</p>"},{"location":"multiblocked2/#logic-node-graph","title":"Logic Node Graph","text":"<p>Node Graph: The node graph is a brand-new way to configure event logic. You no longer need KubeJS to define complex functionality. If you're a user of Blender or Shader Graph, you're going to love this new feature.</p> <p>MBD2 allows you to listen to various machine events through the node graph and set up a wide range of execution logic, giving you immense creative power.</p>"},{"location":"multiblocked2/java_integration/","title":"Java Integration","text":"<p>You can find the latest version from our maven. <pre><code>repositories{\n    maven {\n        name \"firstdarkdev\"\n        url \"https://maven.firstdarkdev.xyz/snapshots\"\n    }\n}\n\ndependencies {\n    implementation fg.deobf(\"com.lowdragmc.ldlib:ldlib-forge-{minecraft_version}:{latest_version}\") { transitive = false }\n    implementation fg.deobf(\"com.lowdragmc.multiblocked2:Multiblocked2:{minecraft_version}-{latest_version}\") { transitive = false }\n}\n</code></pre></p>"},{"location":"multiblocked2/java_integration/#multiblocked2-registry-event","title":"Multiblocked2 Registry Event","text":"<p>Multiblocked2 provides a Forge event (<code>MBDRegistryEvent</code>) for registries.</p> <pre><code>public class MBDEvents {\n\n    @SubscribeEvent\n    public void onRegisterMachine(MBDRegistryEvent.Machine event) {\n        System.out.println(\"Registering machine\");\n    }\n\n    @SubscribeEvent\n    public void onRegisterRecipeType(MBDRegistryEvent.MBDRecipeType event) {\n        System.out.println(\"Registering recipe type\");\n    }\n\n    // other events....\n}\n\npublic void modInit() {\n    IEventBus eventBus = FMLJavaModLoadingContext.get().getModEventBus();\n    eventBus.register(new MBDEvents());\n}\n</code></pre>"},{"location":"multiblocked2/java_integration/#register-machines-via-java-code","title":"Register machines via Java Code","text":"<p>Instead of place projecs files under the <code>.minecraft/assets/ldlib/mbd2/machine_type</code> directly, there are two ways to register machines via code.</p>"},{"location":"multiblocked2/java_integration/#1-create-and-register-machines-via-raw-code","title":"1. Create and register machines via raw code","text":"<pre><code>@SubscribeEvent\npublic void onRegisterMachine(MBDRegistryEvent.Machine event) {\n    var renderer = new IModelRenderer(MBD2.id(\"block/pedestal\"));\n    event.register(MBDMachineDefinition.builder()\n            .id(MBD2.id(\"test_machine\"))\n                    .rootState(MachineState.builder()\n                            .name(\"base\")\n                            .renderer(renderer)\n                            .shape(Shapes.block())\n                            .lightLevel(0)\n                            .build())\n            .blockProperties(ConfigBlockProperties.builder().build())\n            .itemProperties(ConfigItemProperties.builder().build())\n            .build());\n}\n</code></pre>"},{"location":"multiblocked2/java_integration/#2-register-machine-project-files-from-your-mod-resource-assets","title":"2. Register machine project files from your mod resource assets","text":"<p>For example, you have such projects in your resource assets like this.</p> <p></p> <pre><code>@SubscribeEvent\npublic void onRegisterMachine(MBDRegistryEvent.Machine event) {\n    event.registerFromResource(this.getClass(), \"mbd2/machine/machine_project_file.sm\");\n}\n</code></pre>"},{"location":"multiblocked2/KubeJS/event/","title":"Events","text":"<p>All events can be found here:</p> <ul> <li><code>MBDStartupEvents</code></li> <li><code>MBDServerEvents</code></li> <li><code>MBDClientEvents</code></li> </ul>"},{"location":"multiblocked2/KubeJS/event/#registry-events","title":"Registry Events","text":"<p>W.I.P</p>"},{"location":"multiblocked2/KubeJS/event/#machine-events","title":"Machine Events","text":"<p>Check <code>MBDServerEvents</code> and <code>MBDClientEvents</code> for all available machien events.</p> <p>Because events will be posted to the Forge Event Handler as well. We wrap it with a KubeJS Event. So the actually event instance are shown here. Please check it for detials of fields and methods.</p> <p>This is an example of using it. <pre><code>MBDMachineEvents.onOpenUI(\"mbd2:machine_id\", e =&gt; {\n    let event = e.event; // NOTE! you have to use it to get the actual event instance.\n    let machine = event.machine;\n    let machienID = machine.getDefinition().id();\n    console.log(\"Open UI!! id: \" + machienID)\n})\n</code></pre></p>"},{"location":"multiblocked2/KubeJS/recipe/","title":"Recipe Creation","text":"<p>Add reipces to the recipe type (<code>id = mbd2:blender</code>).</p> <pre><code>// server script\nServerEvents.recipes((event) =&gt; {\n    // add recipes here\n    event.recipes.mbd2.blender()\n        // recipe id is optional, but we recommend to set a unique id\n        .id(\"mbd2:recipe_id\")\n        // duration in tick\n        .duration(400)\n        // hight priority will be handled first\n        .priority(-1)\n        // mark this recipe as a fuel recipe\n        .isFuel(true)\n        // item\n        .inputItems(\"minecraft:apple\", \"4x minecraft:oak_log\")\n        .outputItems(\"4x minecraft:apple\")\n        // fluid\n        .inputFluids(\"water 1000\")\n        .outputFluids(\"lava 2000\")\n        // forge energy\n        .inputFE(1000)\n        .outputFE(2000)\n        // create stress\n        .inputStress(1024)\n        .outputStress(2048)\n        // botaina mana\n        .inputMana(100)\n        .outputMana(200)\n        // mek heat\n        .inputHeat(100)\n        .outputHeat(200)\n        // gtm eu\n        .inputEU(100)\n        .outputEU(200)\n        // mek chemicals\n        .inputGases(\"100x mekanism:hydrogen\")\n        .outputGases(\"200x mekanism:oxygen\")\n            // .inputInfusions(...) \n            // .outputInfusions(...) \n            // .inputSlurries(...)\n            // .outputSlurries(...)\n            // .inputPigments(...)\n            // .outputPigments(...)\n        // per tick (consume / generate per tick)\n        .perTick(builder =&gt; builder\n            .inputFluids(\"10x lava\") \n        )\n        // chance\n        .chance(0.5, builder =&gt; builder\n            .inputFluids(\"10x lava\")\n        )\n        // tier chance boost (the final chance = chance + tierChanceBoost * machineLevel)\n        .tierChanceBoost(0.1, builder =&gt; builder\n            .inputFluids(\"10x lava\")\n        )\n        // slot name (ingredient can only be consumed/filled from given slot name (trait name))\n        .slotName(\"input_tank\", builder =&gt; builder\n            .inputFluids(\"10x lava\")\n        )\n        // ui name (ingredient displays in the xei recipe ui (widget id) by a given ui name)\n        .uiName(\"input_tank\", builder =&gt; builder\n            .inputFluids(\"10x lava\")\n        )\n        // condtions\n        .dimension(\"minecraft:overworld\") // dimension id\n        .biome(\"minecraft:plains\") // biome id\n        .machineLevel(2) // min machine level\n        .positionY(-10, 64) // min y, max y\n        .raining(0.5, 1) // min level, max level\n        .thundering(0.5, 1) // min level, max level\n        .blocksInStructure(0, 100, \"minecraft:stone\") // min count, max count, blocks\n        // custom data\n        .addData(\"key\", '{\"temperature\": 32}')\n        .addDataString(\"key\", \"value\")\n        .addDataNumber(\"key\", 32)\n        .addDataBoolean(\"key\", true)\n})\n</code></pre> <p>More apis and details can be found here: MBDRecipeSchema</p>"},{"location":"multiblocked2/KubeJS/trait/","title":"Interact with Traits","text":"<p>You can obtain machine trait by name.</p> <pre><code>// reuturn the first match trait.\nlet trait = machine.getTraitByName(\"item slot\") \n\nlet allTraits = machine.additionalTraits;\n</code></pre>"},{"location":"multiblocked2/KubeJS/trait/#trait-apis-wip","title":"Trait APIs (W.I.P)","text":""},{"location":"multiblocked2/KubeJS/ui/","title":"UI","text":"<p>You might have used mbd2\u2019s visual editor to create the UI, but you may have noticed that apart from the trait widget, the other widgets don't really work. This is because we haven't set up the UI logic, such as what should happen when a button is pressed. As mentioned in the Ldlbib UI, we recommend using the UI Editor to create and edit the UI layout, and using <code>KubeJS</code> / <code>NodeGraph (W.I.P)</code> to set up the interaction logic.</p> <p>Here, we implement a simple, UI-based manual lava filling machine.</p> <p>Note</p> <p>Example can be download here! </p> <p>Put it under the <code>.minecraft</code> folder.</p> <p>First, we configure the machine to have one item trait and one fluid trait, and prepare our UI:</p> <ol> <li>A UI corresponding to the trait.</li> <li>Two <code>buttons</code> corresponding to the filling directions.</li> <li>A <code>TextTexture</code> to display the amount of fluid in the tank.</li> </ol> <p></p> <p>Once you have everything set up, opening the machine's UI should look like this:</p> <p></p>"},{"location":"multiblocked2/KubeJS/ui/#kubejs-control","title":"KubeJS Control","text":"<p>Next, we use KubeJS to add interaction logic to the UI. We provide an event <code>MBDMachineEvents.onUI</code> for you to setup the root widget. This event is triggered after <code>MBDMachineEvents.onOpenUI</code> and everything is prepared except the logic.</p> <pre><code>MBDMachineEvents.onUI(\"mbd2:kjs_ui_test\", e =&gt; {\n    const { machine, root } = e.event;\n    const slot = root.getFirstWidgetById(\"ui:item_slot_0\") // SlotWidget\n    const tank = root.getFirstWidgetById(\"ui:fluid_tank_0\") // FluidTankWidget\n    const fill_button = root.getFirstWidgetById(\"fill_button\") // Button\n    const drain_button = root.getFirstWidgetById(\"drain_button\") // Button\n    const label = root.getFirstWidgetById(\"tank_label\") // TextWidget\n\n    // Set label to display fluid amount\n    label.setTextProvider(() =&gt; Component.string(tank.fluid.amount + \"mB\"))\n\n    // on button click\n    fill_button.setOnPressCallback(clickData =&gt; {\n        if (clickData.isRemote) {\n            // trigger on the remote side\n            // because everything is synced from server to client. you can do nothing on the remote side\n        } else {\n            var stored = slot.item\n            // check if a lava bucket is stored\n            if (stored &amp;&amp; stored.id === \"minecraft:lava_bucket\") {\n                // check if there is enough space in the tank\n                if (tank.lastTankCapacity - tank.fluid.amount &gt;= 1000) {\n                    // remove the lava bucket\n                    slot.item = { item: \"minecraft:bucket\", count: 1 }\n                    // add 1000mB of lava to the tank\n                    tank.fluid = { fluid: \"minecraft:lava\", amount: tank.fluid.amount + 1000 }\n                }\n            }\n        }\n    })\n\n    drain_button.setOnPressCallback(clickData =&gt; {\n        if (!clickData.isRemote) {\n            // check if there is lava in the tank\n            if (tank.fluid.amount &gt;= 1000 &amp;&amp; slot.item.id === \"minecraft:bucket\") {\n                // remove 1000mB of lava from the tank\n                tank.fluid = { fluid: \"minecraft:lava\", amount: tank.fluid.amount - 1000 }\n                // add a lava bucket\n                slot.item = { item: \"minecraft:lava_bucket\", count: 1 }\n            }\n        }\n    })\n\n})\n</code></pre> <p>Let's see our final result!</p>      Your browser does not support video.    <p>We only use four widgets here (<code>TextTexture</code>, <code>Button</code>, <code>Slot</code>, and <code>Tank</code>). For more details about other widgets please check pages.</p>"},{"location":"photon/","title":"Photon","text":"<p>asdfasdf</p>"}]}